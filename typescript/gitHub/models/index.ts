/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type BackedModel, type BackingStore, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export type AuthorAssociation = (typeof AuthorAssociationObject)[keyof typeof AuthorAssociationObject];
/**
 * The status of auto merging a pull request.
 */
export interface AutoMerge extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * Commit message for the merge commit.
     */
    commitMessage?: string | null;
    /**
     * Title for the merge commit message.
     */
    commitTitle?: string | null;
    /**
     * A GitHub user.
     */
    enabledBy?: SimpleUser | null;
    /**
     * The merge method to use.
     */
    mergeMethod?: AutoMerge_merge_method | null;
}
export type AutoMerge_merge_method = (typeof AutoMerge_merge_methodObject)[keyof typeof AutoMerge_merge_methodObject];
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AutoMerge}
 */
// @ts-ignore
export function createAutoMergeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAutoMerge;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Link}
 */
// @ts-ignore
export function createLinkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLink;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NullableLicenseSimple}
 */
// @ts-ignore
export function createNullableLicenseSimpleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNullableLicenseSimple;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NullableMilestone}
 */
// @ts-ignore
export function createNullableMilestoneFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNullableMilestone;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NullableSimpleUser}
 */
// @ts-ignore
export function createNullableSimpleUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNullableSimpleUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NullableTeamSimple}
 */
// @ts-ignore
export function createNullableTeamSimpleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNullableTeamSimple;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PullRequestSimple__links}
 */
// @ts-ignore
export function createPullRequestSimple__linksFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPullRequestSimple__links;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PullRequestSimple_base}
 */
// @ts-ignore
export function createPullRequestSimple_baseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPullRequestSimple_base;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PullRequestSimple_head}
 */
// @ts-ignore
export function createPullRequestSimple_headFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPullRequestSimple_head;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PullRequestSimple_labels}
 */
// @ts-ignore
export function createPullRequestSimple_labelsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPullRequestSimple_labels;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {PullRequestSimple}
 */
// @ts-ignore
export function createPullRequestSimpleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoPullRequestSimple;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Repository_permissions}
 */
// @ts-ignore
export function createRepository_permissionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRepository_permissions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Repository_template_repository_owner}
 */
// @ts-ignore
export function createRepository_template_repository_ownerFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRepository_template_repository_owner;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Repository_template_repository_permissions}
 */
// @ts-ignore
export function createRepository_template_repository_permissionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRepository_template_repository_permissions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Repository_template_repository}
 */
// @ts-ignore
export function createRepository_template_repositoryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRepository_template_repository;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Repository}
 */
// @ts-ignore
export function createRepositoryFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoRepository;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SimpleUser}
 */
// @ts-ignore
export function createSimpleUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSimpleUser;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Team_permissions}
 */
// @ts-ignore
export function createTeam_permissionsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeam_permissions;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Team}
 */
// @ts-ignore
export function createTeamFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoTeam;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {number | string[] | string}
 */
// @ts-ignore
export function createValidationError_errors_valueFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return () => { return {}};
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ValidationError_errors}
 */
// @ts-ignore
export function createValidationError_errorsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoValidationError_errors;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ValidationError}
 */
// @ts-ignore
export function createValidationErrorFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoValidationError;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAutoMerge(autoMerge: Partial<AutoMerge> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { autoMerge.backingStoreEnabled = true; },
        "commit_message": n => { autoMerge.commitMessage = n.getStringValue(); },
        "commit_title": n => { autoMerge.commitTitle = n.getStringValue(); },
        "enabled_by": n => { autoMerge.enabledBy = n.getObjectValue<SimpleUser>(createSimpleUserFromDiscriminatorValue); },
        "merge_method": n => { autoMerge.mergeMethod = n.getEnumValue<AutoMerge_merge_method>(AutoMerge_merge_methodObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLink(link: Partial<Link> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { link.backingStoreEnabled = true; },
        "href": n => { link.href = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNullableLicenseSimple(nullableLicenseSimple: Partial<NullableLicenseSimple> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { nullableLicenseSimple.backingStoreEnabled = true; },
        "html_url": n => { nullableLicenseSimple.htmlUrl = n.getStringValue(); },
        "key": n => { nullableLicenseSimple.key = n.getStringValue(); },
        "name": n => { nullableLicenseSimple.name = n.getStringValue(); },
        "node_id": n => { nullableLicenseSimple.nodeId = n.getStringValue(); },
        "spdx_id": n => { nullableLicenseSimple.spdxId = n.getStringValue(); },
        "url": n => { nullableLicenseSimple.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNullableMilestone(nullableMilestone: Partial<NullableMilestone> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { nullableMilestone.backingStoreEnabled = true; },
        "closed_at": n => { nullableMilestone.closedAt = n.getDateValue(); },
        "closed_issues": n => { nullableMilestone.closedIssues = n.getNumberValue(); },
        "created_at": n => { nullableMilestone.createdAt = n.getDateValue(); },
        "creator": n => { nullableMilestone.creator = n.getObjectValue<NullableSimpleUser>(createNullableSimpleUserFromDiscriminatorValue); },
        "description": n => { nullableMilestone.description = n.getStringValue(); },
        "due_on": n => { nullableMilestone.dueOn = n.getDateValue(); },
        "html_url": n => { nullableMilestone.htmlUrl = n.getStringValue(); },
        "id": n => { nullableMilestone.id = n.getNumberValue(); },
        "labels_url": n => { nullableMilestone.labelsUrl = n.getStringValue(); },
        "node_id": n => { nullableMilestone.nodeId = n.getStringValue(); },
        "number": n => { nullableMilestone.number = n.getNumberValue(); },
        "open_issues": n => { nullableMilestone.openIssues = n.getNumberValue(); },
        "state": n => { nullableMilestone.state = n.getEnumValue<NullableMilestone_state>(NullableMilestone_stateObject) ?? NullableMilestone_stateObject.Open; },
        "title": n => { nullableMilestone.title = n.getStringValue(); },
        "updated_at": n => { nullableMilestone.updatedAt = n.getDateValue(); },
        "url": n => { nullableMilestone.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNullableSimpleUser(nullableSimpleUser: Partial<NullableSimpleUser> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "avatar_url": n => { nullableSimpleUser.avatarUrl = n.getStringValue(); },
        "backingStoreEnabled": n => { nullableSimpleUser.backingStoreEnabled = true; },
        "email": n => { nullableSimpleUser.email = n.getStringValue(); },
        "events_url": n => { nullableSimpleUser.eventsUrl = n.getStringValue(); },
        "followers_url": n => { nullableSimpleUser.followersUrl = n.getStringValue(); },
        "following_url": n => { nullableSimpleUser.followingUrl = n.getStringValue(); },
        "gists_url": n => { nullableSimpleUser.gistsUrl = n.getStringValue(); },
        "gravatar_id": n => { nullableSimpleUser.gravatarId = n.getStringValue(); },
        "html_url": n => { nullableSimpleUser.htmlUrl = n.getStringValue(); },
        "id": n => { nullableSimpleUser.id = n.getNumberValue(); },
        "login": n => { nullableSimpleUser.login = n.getStringValue(); },
        "name": n => { nullableSimpleUser.name = n.getStringValue(); },
        "node_id": n => { nullableSimpleUser.nodeId = n.getStringValue(); },
        "organizations_url": n => { nullableSimpleUser.organizationsUrl = n.getStringValue(); },
        "received_events_url": n => { nullableSimpleUser.receivedEventsUrl = n.getStringValue(); },
        "repos_url": n => { nullableSimpleUser.reposUrl = n.getStringValue(); },
        "site_admin": n => { nullableSimpleUser.siteAdmin = n.getBooleanValue(); },
        "starred_at": n => { nullableSimpleUser.starredAt = n.getStringValue(); },
        "starred_url": n => { nullableSimpleUser.starredUrl = n.getStringValue(); },
        "subscriptions_url": n => { nullableSimpleUser.subscriptionsUrl = n.getStringValue(); },
        "type": n => { nullableSimpleUser.type = n.getStringValue(); },
        "url": n => { nullableSimpleUser.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNullableTeamSimple(nullableTeamSimple: Partial<NullableTeamSimple> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { nullableTeamSimple.backingStoreEnabled = true; },
        "description": n => { nullableTeamSimple.description = n.getStringValue(); },
        "html_url": n => { nullableTeamSimple.htmlUrl = n.getStringValue(); },
        "id": n => { nullableTeamSimple.id = n.getNumberValue(); },
        "ldap_dn": n => { nullableTeamSimple.ldapDn = n.getStringValue(); },
        "members_url": n => { nullableTeamSimple.membersUrl = n.getStringValue(); },
        "name": n => { nullableTeamSimple.name = n.getStringValue(); },
        "node_id": n => { nullableTeamSimple.nodeId = n.getStringValue(); },
        "permission": n => { nullableTeamSimple.permission = n.getStringValue(); },
        "privacy": n => { nullableTeamSimple.privacy = n.getStringValue(); },
        "repositories_url": n => { nullableTeamSimple.repositoriesUrl = n.getStringValue(); },
        "slug": n => { nullableTeamSimple.slug = n.getStringValue(); },
        "url": n => { nullableTeamSimple.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPullRequestSimple(pullRequestSimple: Partial<PullRequestSimple> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "active_lock_reason": n => { pullRequestSimple.activeLockReason = n.getStringValue(); },
        "assignee": n => { pullRequestSimple.assignee = n.getObjectValue<NullableSimpleUser>(createNullableSimpleUserFromDiscriminatorValue); },
        "assignees": n => { pullRequestSimple.assignees = n.getCollectionOfObjectValues<SimpleUser>(createSimpleUserFromDiscriminatorValue); },
        "author_association": n => { pullRequestSimple.authorAssociation = n.getEnumValue<AuthorAssociation>(AuthorAssociationObject); },
        "auto_merge": n => { pullRequestSimple.autoMerge = n.getObjectValue<AutoMerge>(createAutoMergeFromDiscriminatorValue); },
        "backingStoreEnabled": n => { pullRequestSimple.backingStoreEnabled = true; },
        "base": n => { pullRequestSimple.base = n.getObjectValue<PullRequestSimple_base>(createPullRequestSimple_baseFromDiscriminatorValue); },
        "body": n => { pullRequestSimple.body = n.getStringValue(); },
        "closed_at": n => { pullRequestSimple.closedAt = n.getDateValue(); },
        "comments_url": n => { pullRequestSimple.commentsUrl = n.getStringValue(); },
        "commits_url": n => { pullRequestSimple.commitsUrl = n.getStringValue(); },
        "created_at": n => { pullRequestSimple.createdAt = n.getDateValue(); },
        "diff_url": n => { pullRequestSimple.diffUrl = n.getStringValue(); },
        "draft": n => { pullRequestSimple.draft = n.getBooleanValue(); },
        "head": n => { pullRequestSimple.head = n.getObjectValue<PullRequestSimple_head>(createPullRequestSimple_headFromDiscriminatorValue); },
        "html_url": n => { pullRequestSimple.htmlUrl = n.getStringValue(); },
        "id": n => { pullRequestSimple.id = n.getNumberValue(); },
        "issue_url": n => { pullRequestSimple.issueUrl = n.getStringValue(); },
        "labels": n => { pullRequestSimple.labels = n.getCollectionOfObjectValues<PullRequestSimple_labels>(createPullRequestSimple_labelsFromDiscriminatorValue); },
        "_links": n => { pullRequestSimple.links = n.getObjectValue<PullRequestSimple__links>(createPullRequestSimple__linksFromDiscriminatorValue); },
        "locked": n => { pullRequestSimple.locked = n.getBooleanValue(); },
        "merge_commit_sha": n => { pullRequestSimple.mergeCommitSha = n.getStringValue(); },
        "merged_at": n => { pullRequestSimple.mergedAt = n.getDateValue(); },
        "milestone": n => { pullRequestSimple.milestone = n.getObjectValue<NullableMilestone>(createNullableMilestoneFromDiscriminatorValue); },
        "node_id": n => { pullRequestSimple.nodeId = n.getStringValue(); },
        "number": n => { pullRequestSimple.number = n.getNumberValue(); },
        "patch_url": n => { pullRequestSimple.patchUrl = n.getStringValue(); },
        "requested_reviewers": n => { pullRequestSimple.requestedReviewers = n.getCollectionOfObjectValues<SimpleUser>(createSimpleUserFromDiscriminatorValue); },
        "requested_teams": n => { pullRequestSimple.requestedTeams = n.getCollectionOfObjectValues<Team>(createTeamFromDiscriminatorValue); },
        "review_comments_url": n => { pullRequestSimple.reviewCommentsUrl = n.getStringValue(); },
        "review_comment_url": n => { pullRequestSimple.reviewCommentUrl = n.getStringValue(); },
        "state": n => { pullRequestSimple.state = n.getStringValue(); },
        "statuses_url": n => { pullRequestSimple.statusesUrl = n.getStringValue(); },
        "title": n => { pullRequestSimple.title = n.getStringValue(); },
        "updated_at": n => { pullRequestSimple.updatedAt = n.getDateValue(); },
        "url": n => { pullRequestSimple.url = n.getStringValue(); },
        "user": n => { pullRequestSimple.user = n.getObjectValue<NullableSimpleUser>(createNullableSimpleUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPullRequestSimple__links(pullRequestSimple__links: Partial<PullRequestSimple__links> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { pullRequestSimple__links.backingStoreEnabled = true; },
        "comments": n => { pullRequestSimple__links.comments = n.getObjectValue<Link>(createLinkFromDiscriminatorValue); },
        "commits": n => { pullRequestSimple__links.commits = n.getObjectValue<Link>(createLinkFromDiscriminatorValue); },
        "html": n => { pullRequestSimple__links.html = n.getObjectValue<Link>(createLinkFromDiscriminatorValue); },
        "issue": n => { pullRequestSimple__links.issue = n.getObjectValue<Link>(createLinkFromDiscriminatorValue); },
        "review_comment": n => { pullRequestSimple__links.reviewComment = n.getObjectValue<Link>(createLinkFromDiscriminatorValue); },
        "review_comments": n => { pullRequestSimple__links.reviewComments = n.getObjectValue<Link>(createLinkFromDiscriminatorValue); },
        "self": n => { pullRequestSimple__links.self = n.getObjectValue<Link>(createLinkFromDiscriminatorValue); },
        "statuses": n => { pullRequestSimple__links.statuses = n.getObjectValue<Link>(createLinkFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPullRequestSimple_base(pullRequestSimple_base: Partial<PullRequestSimple_base> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { pullRequestSimple_base.backingStoreEnabled = true; },
        "label": n => { pullRequestSimple_base.label = n.getStringValue(); },
        "ref": n => { pullRequestSimple_base.ref = n.getStringValue(); },
        "repo": n => { pullRequestSimple_base.repo = n.getObjectValue<Repository>(createRepositoryFromDiscriminatorValue); },
        "sha": n => { pullRequestSimple_base.sha = n.getStringValue(); },
        "user": n => { pullRequestSimple_base.user = n.getObjectValue<NullableSimpleUser>(createNullableSimpleUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPullRequestSimple_head(pullRequestSimple_head: Partial<PullRequestSimple_head> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { pullRequestSimple_head.backingStoreEnabled = true; },
        "label": n => { pullRequestSimple_head.label = n.getStringValue(); },
        "ref": n => { pullRequestSimple_head.ref = n.getStringValue(); },
        "repo": n => { pullRequestSimple_head.repo = n.getObjectValue<Repository>(createRepositoryFromDiscriminatorValue); },
        "sha": n => { pullRequestSimple_head.sha = n.getStringValue(); },
        "user": n => { pullRequestSimple_head.user = n.getObjectValue<NullableSimpleUser>(createNullableSimpleUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoPullRequestSimple_labels(pullRequestSimple_labels: Partial<PullRequestSimple_labels> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { pullRequestSimple_labels.backingStoreEnabled = true; },
        "color": n => { pullRequestSimple_labels.color = n.getStringValue(); },
        "default": n => { pullRequestSimple_labels.defaultEscaped = n.getBooleanValue(); },
        "description": n => { pullRequestSimple_labels.description = n.getStringValue(); },
        "id": n => { pullRequestSimple_labels.id = n.getNumberValue(); },
        "name": n => { pullRequestSimple_labels.name = n.getStringValue(); },
        "node_id": n => { pullRequestSimple_labels.nodeId = n.getStringValue(); },
        "url": n => { pullRequestSimple_labels.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRepository(repository: Partial<Repository> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allow_auto_merge": n => { repository.allowAutoMerge = n.getBooleanValue(); },
        "allow_forking": n => { repository.allowForking = n.getBooleanValue(); },
        "allow_merge_commit": n => { repository.allowMergeCommit = n.getBooleanValue(); },
        "allow_rebase_merge": n => { repository.allowRebaseMerge = n.getBooleanValue(); },
        "allow_squash_merge": n => { repository.allowSquashMerge = n.getBooleanValue(); },
        "allow_update_branch": n => { repository.allowUpdateBranch = n.getBooleanValue(); },
        "anonymous_access_enabled": n => { repository.anonymousAccessEnabled = n.getBooleanValue(); },
        "archived": n => { repository.archived = n.getBooleanValue(); },
        "archive_url": n => { repository.archiveUrl = n.getStringValue(); },
        "assignees_url": n => { repository.assigneesUrl = n.getStringValue(); },
        "backingStoreEnabled": n => { repository.backingStoreEnabled = true; },
        "blobs_url": n => { repository.blobsUrl = n.getStringValue(); },
        "branches_url": n => { repository.branchesUrl = n.getStringValue(); },
        "clone_url": n => { repository.cloneUrl = n.getStringValue(); },
        "collaborators_url": n => { repository.collaboratorsUrl = n.getStringValue(); },
        "comments_url": n => { repository.commentsUrl = n.getStringValue(); },
        "commits_url": n => { repository.commitsUrl = n.getStringValue(); },
        "compare_url": n => { repository.compareUrl = n.getStringValue(); },
        "contents_url": n => { repository.contentsUrl = n.getStringValue(); },
        "contributors_url": n => { repository.contributorsUrl = n.getStringValue(); },
        "created_at": n => { repository.createdAt = n.getDateValue(); },
        "default_branch": n => { repository.defaultBranch = n.getStringValue(); },
        "delete_branch_on_merge": n => { repository.deleteBranchOnMerge = n.getBooleanValue(); },
        "deployments_url": n => { repository.deploymentsUrl = n.getStringValue(); },
        "description": n => { repository.description = n.getStringValue(); },
        "disabled": n => { repository.disabled = n.getBooleanValue(); },
        "downloads_url": n => { repository.downloadsUrl = n.getStringValue(); },
        "events_url": n => { repository.eventsUrl = n.getStringValue(); },
        "fork": n => { repository.fork = n.getBooleanValue(); },
        "forks": n => { repository.forks = n.getNumberValue(); },
        "forks_count": n => { repository.forksCount = n.getNumberValue(); },
        "forks_url": n => { repository.forksUrl = n.getStringValue(); },
        "full_name": n => { repository.fullName = n.getStringValue(); },
        "git_commits_url": n => { repository.gitCommitsUrl = n.getStringValue(); },
        "git_refs_url": n => { repository.gitRefsUrl = n.getStringValue(); },
        "git_tags_url": n => { repository.gitTagsUrl = n.getStringValue(); },
        "git_url": n => { repository.gitUrl = n.getStringValue(); },
        "has_discussions": n => { repository.hasDiscussions = n.getBooleanValue(); },
        "has_downloads": n => { repository.hasDownloads = n.getBooleanValue(); },
        "has_issues": n => { repository.hasIssues = n.getBooleanValue(); },
        "has_pages": n => { repository.hasPages = n.getBooleanValue(); },
        "has_projects": n => { repository.hasProjects = n.getBooleanValue(); },
        "has_wiki": n => { repository.hasWiki = n.getBooleanValue(); },
        "homepage": n => { repository.homepage = n.getStringValue(); },
        "hooks_url": n => { repository.hooksUrl = n.getStringValue(); },
        "html_url": n => { repository.htmlUrl = n.getStringValue(); },
        "id": n => { repository.id = n.getNumberValue(); },
        "issue_comment_url": n => { repository.issueCommentUrl = n.getStringValue(); },
        "issue_events_url": n => { repository.issueEventsUrl = n.getStringValue(); },
        "issues_url": n => { repository.issuesUrl = n.getStringValue(); },
        "is_template": n => { repository.isTemplate = n.getBooleanValue(); },
        "keys_url": n => { repository.keysUrl = n.getStringValue(); },
        "labels_url": n => { repository.labelsUrl = n.getStringValue(); },
        "language": n => { repository.language = n.getStringValue(); },
        "languages_url": n => { repository.languagesUrl = n.getStringValue(); },
        "license": n => { repository.license = n.getObjectValue<NullableLicenseSimple>(createNullableLicenseSimpleFromDiscriminatorValue); },
        "master_branch": n => { repository.masterBranch = n.getStringValue(); },
        "merge_commit_message": n => { repository.mergeCommitMessage = n.getEnumValue<Repository_merge_commit_message>(Repository_merge_commit_messageObject); },
        "merge_commit_title": n => { repository.mergeCommitTitle = n.getEnumValue<Repository_merge_commit_title>(Repository_merge_commit_titleObject); },
        "merges_url": n => { repository.mergesUrl = n.getStringValue(); },
        "milestones_url": n => { repository.milestonesUrl = n.getStringValue(); },
        "mirror_url": n => { repository.mirrorUrl = n.getStringValue(); },
        "name": n => { repository.name = n.getStringValue(); },
        "network_count": n => { repository.networkCount = n.getNumberValue(); },
        "node_id": n => { repository.nodeId = n.getStringValue(); },
        "notifications_url": n => { repository.notificationsUrl = n.getStringValue(); },
        "open_issues": n => { repository.openIssues = n.getNumberValue(); },
        "open_issues_count": n => { repository.openIssuesCount = n.getNumberValue(); },
        "organization": n => { repository.organization = n.getObjectValue<NullableSimpleUser>(createNullableSimpleUserFromDiscriminatorValue); },
        "owner": n => { repository.owner = n.getObjectValue<SimpleUser>(createSimpleUserFromDiscriminatorValue); },
        "permissions": n => { repository.permissions = n.getObjectValue<Repository_permissions>(createRepository_permissionsFromDiscriminatorValue); },
        "private": n => { repository.private = n.getBooleanValue(); },
        "pulls_url": n => { repository.pullsUrl = n.getStringValue(); },
        "pushed_at": n => { repository.pushedAt = n.getDateValue(); },
        "releases_url": n => { repository.releasesUrl = n.getStringValue(); },
        "size": n => { repository.size = n.getNumberValue(); },
        "squash_merge_commit_message": n => { repository.squashMergeCommitMessage = n.getEnumValue<Repository_squash_merge_commit_message>(Repository_squash_merge_commit_messageObject); },
        "squash_merge_commit_title": n => { repository.squashMergeCommitTitle = n.getEnumValue<Repository_squash_merge_commit_title>(Repository_squash_merge_commit_titleObject); },
        "ssh_url": n => { repository.sshUrl = n.getStringValue(); },
        "stargazers_count": n => { repository.stargazersCount = n.getNumberValue(); },
        "stargazers_url": n => { repository.stargazersUrl = n.getStringValue(); },
        "starred_at": n => { repository.starredAt = n.getStringValue(); },
        "statuses_url": n => { repository.statusesUrl = n.getStringValue(); },
        "subscribers_count": n => { repository.subscribersCount = n.getNumberValue(); },
        "subscribers_url": n => { repository.subscribersUrl = n.getStringValue(); },
        "subscription_url": n => { repository.subscriptionUrl = n.getStringValue(); },
        "svn_url": n => { repository.svnUrl = n.getStringValue(); },
        "tags_url": n => { repository.tagsUrl = n.getStringValue(); },
        "teams_url": n => { repository.teamsUrl = n.getStringValue(); },
        "temp_clone_token": n => { repository.tempCloneToken = n.getStringValue(); },
        "template_repository": n => { repository.templateRepository = n.getObjectValue<Repository_template_repository>(createRepository_template_repositoryFromDiscriminatorValue); },
        "topics": n => { repository.topics = n.getCollectionOfPrimitiveValues<string>(); },
        "trees_url": n => { repository.treesUrl = n.getStringValue(); },
        "updated_at": n => { repository.updatedAt = n.getDateValue(); },
        "url": n => { repository.url = n.getStringValue(); },
        "use_squash_pr_title_as_default": n => { repository.useSquashPrTitleAsDefault = n.getBooleanValue(); },
        "visibility": n => { repository.visibility = n.getStringValue() ?? "public"; },
        "watchers": n => { repository.watchers = n.getNumberValue(); },
        "watchers_count": n => { repository.watchersCount = n.getNumberValue(); },
        "web_commit_signoff_required": n => { repository.webCommitSignoffRequired = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRepository_permissions(repository_permissions: Partial<Repository_permissions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "admin": n => { repository_permissions.admin = n.getBooleanValue(); },
        "backingStoreEnabled": n => { repository_permissions.backingStoreEnabled = true; },
        "maintain": n => { repository_permissions.maintain = n.getBooleanValue(); },
        "pull": n => { repository_permissions.pull = n.getBooleanValue(); },
        "push": n => { repository_permissions.push = n.getBooleanValue(); },
        "triage": n => { repository_permissions.triage = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRepository_template_repository(repository_template_repository: Partial<Repository_template_repository> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "allow_auto_merge": n => { repository_template_repository.allowAutoMerge = n.getBooleanValue(); },
        "allow_merge_commit": n => { repository_template_repository.allowMergeCommit = n.getBooleanValue(); },
        "allow_rebase_merge": n => { repository_template_repository.allowRebaseMerge = n.getBooleanValue(); },
        "allow_squash_merge": n => { repository_template_repository.allowSquashMerge = n.getBooleanValue(); },
        "allow_update_branch": n => { repository_template_repository.allowUpdateBranch = n.getBooleanValue(); },
        "archived": n => { repository_template_repository.archived = n.getBooleanValue(); },
        "archive_url": n => { repository_template_repository.archiveUrl = n.getStringValue(); },
        "assignees_url": n => { repository_template_repository.assigneesUrl = n.getStringValue(); },
        "backingStoreEnabled": n => { repository_template_repository.backingStoreEnabled = true; },
        "blobs_url": n => { repository_template_repository.blobsUrl = n.getStringValue(); },
        "branches_url": n => { repository_template_repository.branchesUrl = n.getStringValue(); },
        "clone_url": n => { repository_template_repository.cloneUrl = n.getStringValue(); },
        "collaborators_url": n => { repository_template_repository.collaboratorsUrl = n.getStringValue(); },
        "comments_url": n => { repository_template_repository.commentsUrl = n.getStringValue(); },
        "commits_url": n => { repository_template_repository.commitsUrl = n.getStringValue(); },
        "compare_url": n => { repository_template_repository.compareUrl = n.getStringValue(); },
        "contents_url": n => { repository_template_repository.contentsUrl = n.getStringValue(); },
        "contributors_url": n => { repository_template_repository.contributorsUrl = n.getStringValue(); },
        "created_at": n => { repository_template_repository.createdAt = n.getStringValue(); },
        "default_branch": n => { repository_template_repository.defaultBranch = n.getStringValue(); },
        "delete_branch_on_merge": n => { repository_template_repository.deleteBranchOnMerge = n.getBooleanValue(); },
        "deployments_url": n => { repository_template_repository.deploymentsUrl = n.getStringValue(); },
        "description": n => { repository_template_repository.description = n.getStringValue(); },
        "disabled": n => { repository_template_repository.disabled = n.getBooleanValue(); },
        "downloads_url": n => { repository_template_repository.downloadsUrl = n.getStringValue(); },
        "events_url": n => { repository_template_repository.eventsUrl = n.getStringValue(); },
        "fork": n => { repository_template_repository.fork = n.getBooleanValue(); },
        "forks_count": n => { repository_template_repository.forksCount = n.getNumberValue(); },
        "forks_url": n => { repository_template_repository.forksUrl = n.getStringValue(); },
        "full_name": n => { repository_template_repository.fullName = n.getStringValue(); },
        "git_commits_url": n => { repository_template_repository.gitCommitsUrl = n.getStringValue(); },
        "git_refs_url": n => { repository_template_repository.gitRefsUrl = n.getStringValue(); },
        "git_tags_url": n => { repository_template_repository.gitTagsUrl = n.getStringValue(); },
        "git_url": n => { repository_template_repository.gitUrl = n.getStringValue(); },
        "has_downloads": n => { repository_template_repository.hasDownloads = n.getBooleanValue(); },
        "has_issues": n => { repository_template_repository.hasIssues = n.getBooleanValue(); },
        "has_pages": n => { repository_template_repository.hasPages = n.getBooleanValue(); },
        "has_projects": n => { repository_template_repository.hasProjects = n.getBooleanValue(); },
        "has_wiki": n => { repository_template_repository.hasWiki = n.getBooleanValue(); },
        "homepage": n => { repository_template_repository.homepage = n.getStringValue(); },
        "hooks_url": n => { repository_template_repository.hooksUrl = n.getStringValue(); },
        "html_url": n => { repository_template_repository.htmlUrl = n.getStringValue(); },
        "id": n => { repository_template_repository.id = n.getNumberValue(); },
        "issue_comment_url": n => { repository_template_repository.issueCommentUrl = n.getStringValue(); },
        "issue_events_url": n => { repository_template_repository.issueEventsUrl = n.getStringValue(); },
        "issues_url": n => { repository_template_repository.issuesUrl = n.getStringValue(); },
        "is_template": n => { repository_template_repository.isTemplate = n.getBooleanValue(); },
        "keys_url": n => { repository_template_repository.keysUrl = n.getStringValue(); },
        "labels_url": n => { repository_template_repository.labelsUrl = n.getStringValue(); },
        "language": n => { repository_template_repository.language = n.getStringValue(); },
        "languages_url": n => { repository_template_repository.languagesUrl = n.getStringValue(); },
        "merge_commit_message": n => { repository_template_repository.mergeCommitMessage = n.getEnumValue<Repository_template_repository_merge_commit_message>(Repository_template_repository_merge_commit_messageObject); },
        "merge_commit_title": n => { repository_template_repository.mergeCommitTitle = n.getEnumValue<Repository_template_repository_merge_commit_title>(Repository_template_repository_merge_commit_titleObject); },
        "merges_url": n => { repository_template_repository.mergesUrl = n.getStringValue(); },
        "milestones_url": n => { repository_template_repository.milestonesUrl = n.getStringValue(); },
        "mirror_url": n => { repository_template_repository.mirrorUrl = n.getStringValue(); },
        "name": n => { repository_template_repository.name = n.getStringValue(); },
        "network_count": n => { repository_template_repository.networkCount = n.getNumberValue(); },
        "node_id": n => { repository_template_repository.nodeId = n.getStringValue(); },
        "notifications_url": n => { repository_template_repository.notificationsUrl = n.getStringValue(); },
        "open_issues_count": n => { repository_template_repository.openIssuesCount = n.getNumberValue(); },
        "owner": n => { repository_template_repository.owner = n.getObjectValue<Repository_template_repository_owner>(createRepository_template_repository_ownerFromDiscriminatorValue); },
        "permissions": n => { repository_template_repository.permissions = n.getObjectValue<Repository_template_repository_permissions>(createRepository_template_repository_permissionsFromDiscriminatorValue); },
        "private": n => { repository_template_repository.private = n.getBooleanValue(); },
        "pulls_url": n => { repository_template_repository.pullsUrl = n.getStringValue(); },
        "pushed_at": n => { repository_template_repository.pushedAt = n.getStringValue(); },
        "releases_url": n => { repository_template_repository.releasesUrl = n.getStringValue(); },
        "size": n => { repository_template_repository.size = n.getNumberValue(); },
        "squash_merge_commit_message": n => { repository_template_repository.squashMergeCommitMessage = n.getEnumValue<Repository_template_repository_squash_merge_commit_message>(Repository_template_repository_squash_merge_commit_messageObject); },
        "squash_merge_commit_title": n => { repository_template_repository.squashMergeCommitTitle = n.getEnumValue<Repository_template_repository_squash_merge_commit_title>(Repository_template_repository_squash_merge_commit_titleObject); },
        "ssh_url": n => { repository_template_repository.sshUrl = n.getStringValue(); },
        "stargazers_count": n => { repository_template_repository.stargazersCount = n.getNumberValue(); },
        "stargazers_url": n => { repository_template_repository.stargazersUrl = n.getStringValue(); },
        "statuses_url": n => { repository_template_repository.statusesUrl = n.getStringValue(); },
        "subscribers_count": n => { repository_template_repository.subscribersCount = n.getNumberValue(); },
        "subscribers_url": n => { repository_template_repository.subscribersUrl = n.getStringValue(); },
        "subscription_url": n => { repository_template_repository.subscriptionUrl = n.getStringValue(); },
        "svn_url": n => { repository_template_repository.svnUrl = n.getStringValue(); },
        "tags_url": n => { repository_template_repository.tagsUrl = n.getStringValue(); },
        "teams_url": n => { repository_template_repository.teamsUrl = n.getStringValue(); },
        "temp_clone_token": n => { repository_template_repository.tempCloneToken = n.getStringValue(); },
        "topics": n => { repository_template_repository.topics = n.getCollectionOfPrimitiveValues<string>(); },
        "trees_url": n => { repository_template_repository.treesUrl = n.getStringValue(); },
        "updated_at": n => { repository_template_repository.updatedAt = n.getStringValue(); },
        "url": n => { repository_template_repository.url = n.getStringValue(); },
        "use_squash_pr_title_as_default": n => { repository_template_repository.useSquashPrTitleAsDefault = n.getBooleanValue(); },
        "visibility": n => { repository_template_repository.visibility = n.getStringValue(); },
        "watchers_count": n => { repository_template_repository.watchersCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRepository_template_repository_owner(repository_template_repository_owner: Partial<Repository_template_repository_owner> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "avatar_url": n => { repository_template_repository_owner.avatarUrl = n.getStringValue(); },
        "backingStoreEnabled": n => { repository_template_repository_owner.backingStoreEnabled = true; },
        "events_url": n => { repository_template_repository_owner.eventsUrl = n.getStringValue(); },
        "followers_url": n => { repository_template_repository_owner.followersUrl = n.getStringValue(); },
        "following_url": n => { repository_template_repository_owner.followingUrl = n.getStringValue(); },
        "gists_url": n => { repository_template_repository_owner.gistsUrl = n.getStringValue(); },
        "gravatar_id": n => { repository_template_repository_owner.gravatarId = n.getStringValue(); },
        "html_url": n => { repository_template_repository_owner.htmlUrl = n.getStringValue(); },
        "id": n => { repository_template_repository_owner.id = n.getNumberValue(); },
        "login": n => { repository_template_repository_owner.login = n.getStringValue(); },
        "node_id": n => { repository_template_repository_owner.nodeId = n.getStringValue(); },
        "organizations_url": n => { repository_template_repository_owner.organizationsUrl = n.getStringValue(); },
        "received_events_url": n => { repository_template_repository_owner.receivedEventsUrl = n.getStringValue(); },
        "repos_url": n => { repository_template_repository_owner.reposUrl = n.getStringValue(); },
        "site_admin": n => { repository_template_repository_owner.siteAdmin = n.getBooleanValue(); },
        "starred_url": n => { repository_template_repository_owner.starredUrl = n.getStringValue(); },
        "subscriptions_url": n => { repository_template_repository_owner.subscriptionsUrl = n.getStringValue(); },
        "type": n => { repository_template_repository_owner.type = n.getStringValue(); },
        "url": n => { repository_template_repository_owner.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoRepository_template_repository_permissions(repository_template_repository_permissions: Partial<Repository_template_repository_permissions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "admin": n => { repository_template_repository_permissions.admin = n.getBooleanValue(); },
        "backingStoreEnabled": n => { repository_template_repository_permissions.backingStoreEnabled = true; },
        "maintain": n => { repository_template_repository_permissions.maintain = n.getBooleanValue(); },
        "pull": n => { repository_template_repository_permissions.pull = n.getBooleanValue(); },
        "push": n => { repository_template_repository_permissions.push = n.getBooleanValue(); },
        "triage": n => { repository_template_repository_permissions.triage = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSimpleUser(simpleUser: Partial<SimpleUser> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "avatar_url": n => { simpleUser.avatarUrl = n.getStringValue(); },
        "backingStoreEnabled": n => { simpleUser.backingStoreEnabled = true; },
        "email": n => { simpleUser.email = n.getStringValue(); },
        "events_url": n => { simpleUser.eventsUrl = n.getStringValue(); },
        "followers_url": n => { simpleUser.followersUrl = n.getStringValue(); },
        "following_url": n => { simpleUser.followingUrl = n.getStringValue(); },
        "gists_url": n => { simpleUser.gistsUrl = n.getStringValue(); },
        "gravatar_id": n => { simpleUser.gravatarId = n.getStringValue(); },
        "html_url": n => { simpleUser.htmlUrl = n.getStringValue(); },
        "id": n => { simpleUser.id = n.getNumberValue(); },
        "login": n => { simpleUser.login = n.getStringValue(); },
        "name": n => { simpleUser.name = n.getStringValue(); },
        "node_id": n => { simpleUser.nodeId = n.getStringValue(); },
        "organizations_url": n => { simpleUser.organizationsUrl = n.getStringValue(); },
        "received_events_url": n => { simpleUser.receivedEventsUrl = n.getStringValue(); },
        "repos_url": n => { simpleUser.reposUrl = n.getStringValue(); },
        "site_admin": n => { simpleUser.siteAdmin = n.getBooleanValue(); },
        "starred_at": n => { simpleUser.starredAt = n.getStringValue(); },
        "starred_url": n => { simpleUser.starredUrl = n.getStringValue(); },
        "subscriptions_url": n => { simpleUser.subscriptionsUrl = n.getStringValue(); },
        "type": n => { simpleUser.type = n.getStringValue(); },
        "url": n => { simpleUser.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeam(team: Partial<Team> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { team.backingStoreEnabled = true; },
        "description": n => { team.description = n.getStringValue(); },
        "html_url": n => { team.htmlUrl = n.getStringValue(); },
        "id": n => { team.id = n.getNumberValue(); },
        "members_url": n => { team.membersUrl = n.getStringValue(); },
        "name": n => { team.name = n.getStringValue(); },
        "node_id": n => { team.nodeId = n.getStringValue(); },
        "parent": n => { team.parent = n.getObjectValue<NullableTeamSimple>(createNullableTeamSimpleFromDiscriminatorValue); },
        "permission": n => { team.permission = n.getStringValue(); },
        "permissions": n => { team.permissions = n.getObjectValue<Team_permissions>(createTeam_permissionsFromDiscriminatorValue); },
        "privacy": n => { team.privacy = n.getStringValue(); },
        "repositories_url": n => { team.repositoriesUrl = n.getStringValue(); },
        "slug": n => { team.slug = n.getStringValue(); },
        "url": n => { team.url = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoTeam_permissions(team_permissions: Partial<Team_permissions> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "admin": n => { team_permissions.admin = n.getBooleanValue(); },
        "backingStoreEnabled": n => { team_permissions.backingStoreEnabled = true; },
        "maintain": n => { team_permissions.maintain = n.getBooleanValue(); },
        "pull": n => { team_permissions.pull = n.getBooleanValue(); },
        "push": n => { team_permissions.push = n.getBooleanValue(); },
        "triage": n => { team_permissions.triage = n.getBooleanValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoValidationError(validationError: Partial<ValidationError> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { validationError.backingStoreEnabled = true; },
        "documentation_url": n => { validationError.documentationUrl = n.getStringValue(); },
        "errors": n => { validationError.errors = n.getCollectionOfObjectValues<ValidationError_errors>(createValidationError_errorsFromDiscriminatorValue); },
        "message": n => { validationError.messageEscaped = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoValidationError_errors(validationError_errors: Partial<ValidationError_errors> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "backingStoreEnabled": n => { validationError_errors.backingStoreEnabled = true; },
        "code": n => { validationError_errors.code = n.getStringValue(); },
        "field": n => { validationError_errors.field = n.getStringValue(); },
        "index": n => { validationError_errors.index = n.getNumberValue(); },
        "message": n => { validationError_errors.message = n.getStringValue(); },
        "resource": n => { validationError_errors.resource = n.getStringValue(); },
        "value": n => { validationError_errors.value = n.getNumberValue() ?? n.getCollectionOfPrimitiveValues<string>() ?? n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoValidationError_errors_value(validationError_errors_value: Partial<number | string | string> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * Hypermedia Link
 */
export interface Link extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The href property
     */
    href?: string | null;
}
/**
 * License Simple
 */
export interface NullableLicenseSimple extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The html_url property
     */
    htmlUrl?: string | null;
    /**
     * The key property
     */
    key?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * The spdx_id property
     */
    spdxId?: string | null;
    /**
     * The url property
     */
    url?: string | null;
}
/**
 * A collection of related issues and pull requests.
 */
export interface NullableMilestone extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The closed_at property
     */
    closedAt?: Date | null;
    /**
     * The closed_issues property
     */
    closedIssues?: number | null;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * A GitHub user.
     */
    creator?: NullableSimpleUser | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The due_on property
     */
    dueOn?: Date | null;
    /**
     * The html_url property
     */
    htmlUrl?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The labels_url property
     */
    labelsUrl?: string | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * The number of the milestone.
     */
    number?: number | null;
    /**
     * The open_issues property
     */
    openIssues?: number | null;
    /**
     * The state of the milestone.
     */
    state?: NullableMilestone_state | null;
    /**
     * The title of the milestone.
     */
    title?: string | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
    /**
     * The url property
     */
    url?: string | null;
}
export type NullableMilestone_state = (typeof NullableMilestone_stateObject)[keyof typeof NullableMilestone_stateObject];
/**
 * A GitHub user.
 */
export interface NullableSimpleUser extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The avatar_url property
     */
    avatarUrl?: string | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The events_url property
     */
    eventsUrl?: string | null;
    /**
     * The followers_url property
     */
    followersUrl?: string | null;
    /**
     * The following_url property
     */
    followingUrl?: string | null;
    /**
     * The gists_url property
     */
    gistsUrl?: string | null;
    /**
     * The gravatar_id property
     */
    gravatarId?: string | null;
    /**
     * The html_url property
     */
    htmlUrl?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The login property
     */
    login?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * The organizations_url property
     */
    organizationsUrl?: string | null;
    /**
     * The received_events_url property
     */
    receivedEventsUrl?: string | null;
    /**
     * The repos_url property
     */
    reposUrl?: string | null;
    /**
     * The site_admin property
     */
    siteAdmin?: boolean | null;
    /**
     * The starred_at property
     */
    starredAt?: string | null;
    /**
     * The starred_url property
     */
    starredUrl?: string | null;
    /**
     * The subscriptions_url property
     */
    subscriptionsUrl?: string | null;
    /**
     * The type property
     */
    type?: string | null;
    /**
     * The url property
     */
    url?: string | null;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface NullableTeamSimple extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * Description of the team
     */
    description?: string | null;
    /**
     * The html_url property
     */
    htmlUrl?: string | null;
    /**
     * Unique identifier of the team
     */
    id?: number | null;
    /**
     * Distinguished Name (DN) that team maps to within LDAP environment
     */
    ldapDn?: string | null;
    /**
     * The members_url property
     */
    membersUrl?: string | null;
    /**
     * Name of the team
     */
    name?: string | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string | null;
    /**
     * The level of privacy this team should have
     */
    privacy?: string | null;
    /**
     * The repositories_url property
     */
    repositoriesUrl?: string | null;
    /**
     * The slug property
     */
    slug?: string | null;
    /**
     * URL for the team
     */
    url?: string | null;
}
/**
 * Pull Request Simple
 */
export interface PullRequestSimple extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * The active_lock_reason property
     */
    activeLockReason?: string | null;
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * A GitHub user.
     */
    assignee?: NullableSimpleUser | null;
    /**
     * The assignees property
     */
    assignees?: SimpleUser[] | null;
    /**
     * How the author is associated with the repository.
     */
    authorAssociation?: AuthorAssociation | null;
    /**
     * The status of auto merging a pull request.
     */
    autoMerge?: AutoMerge | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The base property
     */
    base?: PullRequestSimple_base | null;
    /**
     * The body property
     */
    body?: string | null;
    /**
     * The closed_at property
     */
    closedAt?: Date | null;
    /**
     * The comments_url property
     */
    commentsUrl?: string | null;
    /**
     * The commits_url property
     */
    commitsUrl?: string | null;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The diff_url property
     */
    diffUrl?: string | null;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft?: boolean | null;
    /**
     * The head property
     */
    head?: PullRequestSimple_head | null;
    /**
     * The html_url property
     */
    htmlUrl?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The issue_url property
     */
    issueUrl?: string | null;
    /**
     * The labels property
     */
    labels?: PullRequestSimple_labels[] | null;
    /**
     * The _links property
     */
    links?: PullRequestSimple__links | null;
    /**
     * The locked property
     */
    locked?: boolean | null;
    /**
     * The merge_commit_sha property
     */
    mergeCommitSha?: string | null;
    /**
     * The merged_at property
     */
    mergedAt?: Date | null;
    /**
     * A collection of related issues and pull requests.
     */
    milestone?: NullableMilestone | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * The number property
     */
    number?: number | null;
    /**
     * The patch_url property
     */
    patchUrl?: string | null;
    /**
     * The requested_reviewers property
     */
    requestedReviewers?: SimpleUser[] | null;
    /**
     * The requested_teams property
     */
    requestedTeams?: Team[] | null;
    /**
     * The review_comments_url property
     */
    reviewCommentsUrl?: string | null;
    /**
     * The review_comment_url property
     */
    reviewCommentUrl?: string | null;
    /**
     * The state property
     */
    state?: string | null;
    /**
     * The statuses_url property
     */
    statusesUrl?: string | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
    /**
     * The url property
     */
    url?: string | null;
    /**
     * A GitHub user.
     */
    user?: NullableSimpleUser | null;
}
export interface PullRequestSimple__links extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * Hypermedia Link
     */
    comments?: Link | null;
    /**
     * Hypermedia Link
     */
    commits?: Link | null;
    /**
     * Hypermedia Link
     */
    html?: Link | null;
    /**
     * Hypermedia Link
     */
    issue?: Link | null;
    /**
     * Hypermedia Link
     */
    reviewComment?: Link | null;
    /**
     * Hypermedia Link
     */
    reviewComments?: Link | null;
    /**
     * Hypermedia Link
     */
    self?: Link | null;
    /**
     * Hypermedia Link
     */
    statuses?: Link | null;
}
export interface PullRequestSimple_base extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The label property
     */
    label?: string | null;
    /**
     * The ref property
     */
    ref?: string | null;
    /**
     * A repository on GitHub.
     */
    repo?: Repository | null;
    /**
     * The sha property
     */
    sha?: string | null;
    /**
     * A GitHub user.
     */
    user?: NullableSimpleUser | null;
}
export interface PullRequestSimple_head extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The label property
     */
    label?: string | null;
    /**
     * The ref property
     */
    ref?: string | null;
    /**
     * A repository on GitHub.
     */
    repo?: Repository | null;
    /**
     * The sha property
     */
    sha?: string | null;
    /**
     * A GitHub user.
     */
    user?: NullableSimpleUser | null;
}
export interface PullRequestSimple_labels extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The color property
     */
    color?: string | null;
    /**
     * The default property
     */
    defaultEscaped?: boolean | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * The url property
     */
    url?: string | null;
}
/**
 * A repository on GitHub.
 */
export interface Repository extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Whether to allow Auto-merge to be used on pull requests.
     */
    allowAutoMerge?: boolean | null;
    /**
     * Whether to allow forking this repo
     */
    allowForking?: boolean | null;
    /**
     * Whether to allow merge commits for pull requests.
     */
    allowMergeCommit?: boolean | null;
    /**
     * Whether to allow rebase merges for pull requests.
     */
    allowRebaseMerge?: boolean | null;
    /**
     * Whether to allow squash merges for pull requests.
     */
    allowSquashMerge?: boolean | null;
    /**
     * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
     */
    allowUpdateBranch?: boolean | null;
    /**
     * Whether anonymous git access is enabled for this repository
     */
    anonymousAccessEnabled?: boolean | null;
    /**
     * Whether the repository is archived.
     */
    archived?: boolean | null;
    /**
     * The archive_url property
     */
    archiveUrl?: string | null;
    /**
     * The assignees_url property
     */
    assigneesUrl?: string | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The blobs_url property
     */
    blobsUrl?: string | null;
    /**
     * The branches_url property
     */
    branchesUrl?: string | null;
    /**
     * The clone_url property
     */
    cloneUrl?: string | null;
    /**
     * The collaborators_url property
     */
    collaboratorsUrl?: string | null;
    /**
     * The comments_url property
     */
    commentsUrl?: string | null;
    /**
     * The commits_url property
     */
    commitsUrl?: string | null;
    /**
     * The compare_url property
     */
    compareUrl?: string | null;
    /**
     * The contents_url property
     */
    contentsUrl?: string | null;
    /**
     * The contributors_url property
     */
    contributorsUrl?: string | null;
    /**
     * The created_at property
     */
    createdAt?: Date | null;
    /**
     * The default branch of the repository.
     */
    defaultBranch?: string | null;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    deleteBranchOnMerge?: boolean | null;
    /**
     * The deployments_url property
     */
    deploymentsUrl?: string | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * Returns whether or not this repository disabled.
     */
    disabled?: boolean | null;
    /**
     * The downloads_url property
     */
    downloadsUrl?: string | null;
    /**
     * The events_url property
     */
    eventsUrl?: string | null;
    /**
     * The fork property
     */
    fork?: boolean | null;
    /**
     * The forks property
     */
    forks?: number | null;
    /**
     * The forks_count property
     */
    forksCount?: number | null;
    /**
     * The forks_url property
     */
    forksUrl?: string | null;
    /**
     * The full_name property
     */
    fullName?: string | null;
    /**
     * The git_commits_url property
     */
    gitCommitsUrl?: string | null;
    /**
     * The git_refs_url property
     */
    gitRefsUrl?: string | null;
    /**
     * The git_tags_url property
     */
    gitTagsUrl?: string | null;
    /**
     * The git_url property
     */
    gitUrl?: string | null;
    /**
     * Whether discussions are enabled.
     */
    hasDiscussions?: boolean | null;
    /**
     * Whether downloads are enabled.
     */
    hasDownloads?: boolean | null;
    /**
     * Whether issues are enabled.
     */
    hasIssues?: boolean | null;
    /**
     * The has_pages property
     */
    hasPages?: boolean | null;
    /**
     * Whether projects are enabled.
     */
    hasProjects?: boolean | null;
    /**
     * Whether the wiki is enabled.
     */
    hasWiki?: boolean | null;
    /**
     * The homepage property
     */
    homepage?: string | null;
    /**
     * The hooks_url property
     */
    hooksUrl?: string | null;
    /**
     * The html_url property
     */
    htmlUrl?: string | null;
    /**
     * Unique identifier of the repository
     */
    id?: number | null;
    /**
     * The issue_comment_url property
     */
    issueCommentUrl?: string | null;
    /**
     * The issue_events_url property
     */
    issueEventsUrl?: string | null;
    /**
     * The issues_url property
     */
    issuesUrl?: string | null;
    /**
     * Whether this repository acts as a template that can be used to generate new repositories.
     */
    isTemplate?: boolean | null;
    /**
     * The keys_url property
     */
    keysUrl?: string | null;
    /**
     * The labels_url property
     */
    labelsUrl?: string | null;
    /**
     * The language property
     */
    language?: string | null;
    /**
     * The languages_url property
     */
    languagesUrl?: string | null;
    /**
     * License Simple
     */
    license?: NullableLicenseSimple | null;
    /**
     * The master_branch property
     */
    masterBranch?: string | null;
    /**
     * The default value for a merge commit message.- `PR_TITLE` - default to the pull request's title.- `PR_BODY` - default to the pull request's body.- `BLANK` - default to a blank commit message.
     */
    mergeCommitMessage?: Repository_merge_commit_message | null;
    /**
     * The default value for a merge commit title.- `PR_TITLE` - default to the pull request's title.- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    mergeCommitTitle?: Repository_merge_commit_title | null;
    /**
     * The merges_url property
     */
    mergesUrl?: string | null;
    /**
     * The milestones_url property
     */
    milestonesUrl?: string | null;
    /**
     * The mirror_url property
     */
    mirrorUrl?: string | null;
    /**
     * The name of the repository.
     */
    name?: string | null;
    /**
     * The network_count property
     */
    networkCount?: number | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * The notifications_url property
     */
    notificationsUrl?: string | null;
    /**
     * The open_issues property
     */
    openIssues?: number | null;
    /**
     * The open_issues_count property
     */
    openIssuesCount?: number | null;
    /**
     * A GitHub user.
     */
    organization?: NullableSimpleUser | null;
    /**
     * A GitHub user.
     */
    owner?: SimpleUser | null;
    /**
     * The permissions property
     */
    permissions?: Repository_permissions | null;
    /**
     * Whether the repository is private or public.
     */
    private?: boolean | null;
    /**
     * The pulls_url property
     */
    pullsUrl?: string | null;
    /**
     * The pushed_at property
     */
    pushedAt?: Date | null;
    /**
     * The releases_url property
     */
    releasesUrl?: string | null;
    /**
     * The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
     */
    size?: number | null;
    /**
     * The default value for a squash merge commit message:- `PR_BODY` - default to the pull request's body.- `COMMIT_MESSAGES` - default to the branch's commit messages.- `BLANK` - default to a blank commit message.
     */
    squashMergeCommitMessage?: Repository_squash_merge_commit_message | null;
    /**
     * The default value for a squash merge commit title:- `PR_TITLE` - default to the pull request's title.- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squashMergeCommitTitle?: Repository_squash_merge_commit_title | null;
    /**
     * The ssh_url property
     */
    sshUrl?: string | null;
    /**
     * The stargazers_count property
     */
    stargazersCount?: number | null;
    /**
     * The stargazers_url property
     */
    stargazersUrl?: string | null;
    /**
     * The starred_at property
     */
    starredAt?: string | null;
    /**
     * The statuses_url property
     */
    statusesUrl?: string | null;
    /**
     * The subscribers_count property
     */
    subscribersCount?: number | null;
    /**
     * The subscribers_url property
     */
    subscribersUrl?: string | null;
    /**
     * The subscription_url property
     */
    subscriptionUrl?: string | null;
    /**
     * The svn_url property
     */
    svnUrl?: string | null;
    /**
     * The tags_url property
     */
    tagsUrl?: string | null;
    /**
     * The teams_url property
     */
    teamsUrl?: string | null;
    /**
     * The temp_clone_token property
     */
    tempCloneToken?: string | null;
    /**
     * The template_repository property
     */
    templateRepository?: Repository_template_repository | null;
    /**
     * The topics property
     */
    topics?: string[] | null;
    /**
     * The trees_url property
     */
    treesUrl?: string | null;
    /**
     * The updated_at property
     */
    updatedAt?: Date | null;
    /**
     * The url property
     */
    url?: string | null;
    /**
     * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     * @deprecated 
     */
    useSquashPrTitleAsDefault?: boolean | null;
    /**
     * The repository visibility: public, private, or internal.
     */
    visibility?: string | null;
    /**
     * The watchers property
     */
    watchers?: number | null;
    /**
     * The watchers_count property
     */
    watchersCount?: number | null;
    /**
     * Whether to require contributors to sign off on web-based commits
     */
    webCommitSignoffRequired?: boolean | null;
}
export type Repository_merge_commit_message = (typeof Repository_merge_commit_messageObject)[keyof typeof Repository_merge_commit_messageObject];
export type Repository_merge_commit_title = (typeof Repository_merge_commit_titleObject)[keyof typeof Repository_merge_commit_titleObject];
export interface Repository_permissions extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The admin property
     */
    admin?: boolean | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The maintain property
     */
    maintain?: boolean | null;
    /**
     * The pull property
     */
    pull?: boolean | null;
    /**
     * The push property
     */
    push?: boolean | null;
    /**
     * The triage property
     */
    triage?: boolean | null;
}
export type Repository_squash_merge_commit_message = (typeof Repository_squash_merge_commit_messageObject)[keyof typeof Repository_squash_merge_commit_messageObject];
export type Repository_squash_merge_commit_title = (typeof Repository_squash_merge_commit_titleObject)[keyof typeof Repository_squash_merge_commit_titleObject];
export interface Repository_template_repository extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The allow_auto_merge property
     */
    allowAutoMerge?: boolean | null;
    /**
     * The allow_merge_commit property
     */
    allowMergeCommit?: boolean | null;
    /**
     * The allow_rebase_merge property
     */
    allowRebaseMerge?: boolean | null;
    /**
     * The allow_squash_merge property
     */
    allowSquashMerge?: boolean | null;
    /**
     * The allow_update_branch property
     */
    allowUpdateBranch?: boolean | null;
    /**
     * The archived property
     */
    archived?: boolean | null;
    /**
     * The archive_url property
     */
    archiveUrl?: string | null;
    /**
     * The assignees_url property
     */
    assigneesUrl?: string | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The blobs_url property
     */
    blobsUrl?: string | null;
    /**
     * The branches_url property
     */
    branchesUrl?: string | null;
    /**
     * The clone_url property
     */
    cloneUrl?: string | null;
    /**
     * The collaborators_url property
     */
    collaboratorsUrl?: string | null;
    /**
     * The comments_url property
     */
    commentsUrl?: string | null;
    /**
     * The commits_url property
     */
    commitsUrl?: string | null;
    /**
     * The compare_url property
     */
    compareUrl?: string | null;
    /**
     * The contents_url property
     */
    contentsUrl?: string | null;
    /**
     * The contributors_url property
     */
    contributorsUrl?: string | null;
    /**
     * The created_at property
     */
    createdAt?: string | null;
    /**
     * The default_branch property
     */
    defaultBranch?: string | null;
    /**
     * The delete_branch_on_merge property
     */
    deleteBranchOnMerge?: boolean | null;
    /**
     * The deployments_url property
     */
    deploymentsUrl?: string | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The disabled property
     */
    disabled?: boolean | null;
    /**
     * The downloads_url property
     */
    downloadsUrl?: string | null;
    /**
     * The events_url property
     */
    eventsUrl?: string | null;
    /**
     * The fork property
     */
    fork?: boolean | null;
    /**
     * The forks_count property
     */
    forksCount?: number | null;
    /**
     * The forks_url property
     */
    forksUrl?: string | null;
    /**
     * The full_name property
     */
    fullName?: string | null;
    /**
     * The git_commits_url property
     */
    gitCommitsUrl?: string | null;
    /**
     * The git_refs_url property
     */
    gitRefsUrl?: string | null;
    /**
     * The git_tags_url property
     */
    gitTagsUrl?: string | null;
    /**
     * The git_url property
     */
    gitUrl?: string | null;
    /**
     * The has_downloads property
     */
    hasDownloads?: boolean | null;
    /**
     * The has_issues property
     */
    hasIssues?: boolean | null;
    /**
     * The has_pages property
     */
    hasPages?: boolean | null;
    /**
     * The has_projects property
     */
    hasProjects?: boolean | null;
    /**
     * The has_wiki property
     */
    hasWiki?: boolean | null;
    /**
     * The homepage property
     */
    homepage?: string | null;
    /**
     * The hooks_url property
     */
    hooksUrl?: string | null;
    /**
     * The html_url property
     */
    htmlUrl?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The issue_comment_url property
     */
    issueCommentUrl?: string | null;
    /**
     * The issue_events_url property
     */
    issueEventsUrl?: string | null;
    /**
     * The issues_url property
     */
    issuesUrl?: string | null;
    /**
     * The is_template property
     */
    isTemplate?: boolean | null;
    /**
     * The keys_url property
     */
    keysUrl?: string | null;
    /**
     * The labels_url property
     */
    labelsUrl?: string | null;
    /**
     * The language property
     */
    language?: string | null;
    /**
     * The languages_url property
     */
    languagesUrl?: string | null;
    /**
     * The default value for a merge commit message.- `PR_TITLE` - default to the pull request's title.- `PR_BODY` - default to the pull request's body.- `BLANK` - default to a blank commit message.
     */
    mergeCommitMessage?: Repository_template_repository_merge_commit_message | null;
    /**
     * The default value for a merge commit title.- `PR_TITLE` - default to the pull request's title.- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    mergeCommitTitle?: Repository_template_repository_merge_commit_title | null;
    /**
     * The merges_url property
     */
    mergesUrl?: string | null;
    /**
     * The milestones_url property
     */
    milestonesUrl?: string | null;
    /**
     * The mirror_url property
     */
    mirrorUrl?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The network_count property
     */
    networkCount?: number | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * The notifications_url property
     */
    notificationsUrl?: string | null;
    /**
     * The open_issues_count property
     */
    openIssuesCount?: number | null;
    /**
     * The owner property
     */
    owner?: Repository_template_repository_owner | null;
    /**
     * The permissions property
     */
    permissions?: Repository_template_repository_permissions | null;
    /**
     * The private property
     */
    private?: boolean | null;
    /**
     * The pulls_url property
     */
    pullsUrl?: string | null;
    /**
     * The pushed_at property
     */
    pushedAt?: string | null;
    /**
     * The releases_url property
     */
    releasesUrl?: string | null;
    /**
     * The size property
     */
    size?: number | null;
    /**
     * The default value for a squash merge commit message:- `PR_BODY` - default to the pull request's body.- `COMMIT_MESSAGES` - default to the branch's commit messages.- `BLANK` - default to a blank commit message.
     */
    squashMergeCommitMessage?: Repository_template_repository_squash_merge_commit_message | null;
    /**
     * The default value for a squash merge commit title:- `PR_TITLE` - default to the pull request's title.- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squashMergeCommitTitle?: Repository_template_repository_squash_merge_commit_title | null;
    /**
     * The ssh_url property
     */
    sshUrl?: string | null;
    /**
     * The stargazers_count property
     */
    stargazersCount?: number | null;
    /**
     * The stargazers_url property
     */
    stargazersUrl?: string | null;
    /**
     * The statuses_url property
     */
    statusesUrl?: string | null;
    /**
     * The subscribers_count property
     */
    subscribersCount?: number | null;
    /**
     * The subscribers_url property
     */
    subscribersUrl?: string | null;
    /**
     * The subscription_url property
     */
    subscriptionUrl?: string | null;
    /**
     * The svn_url property
     */
    svnUrl?: string | null;
    /**
     * The tags_url property
     */
    tagsUrl?: string | null;
    /**
     * The teams_url property
     */
    teamsUrl?: string | null;
    /**
     * The temp_clone_token property
     */
    tempCloneToken?: string | null;
    /**
     * The topics property
     */
    topics?: string[] | null;
    /**
     * The trees_url property
     */
    treesUrl?: string | null;
    /**
     * The updated_at property
     */
    updatedAt?: string | null;
    /**
     * The url property
     */
    url?: string | null;
    /**
     * The use_squash_pr_title_as_default property
     */
    useSquashPrTitleAsDefault?: boolean | null;
    /**
     * The visibility property
     */
    visibility?: string | null;
    /**
     * The watchers_count property
     */
    watchersCount?: number | null;
}
export type Repository_template_repository_merge_commit_message = (typeof Repository_template_repository_merge_commit_messageObject)[keyof typeof Repository_template_repository_merge_commit_messageObject];
export type Repository_template_repository_merge_commit_title = (typeof Repository_template_repository_merge_commit_titleObject)[keyof typeof Repository_template_repository_merge_commit_titleObject];
export interface Repository_template_repository_owner extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The avatar_url property
     */
    avatarUrl?: string | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The events_url property
     */
    eventsUrl?: string | null;
    /**
     * The followers_url property
     */
    followersUrl?: string | null;
    /**
     * The following_url property
     */
    followingUrl?: string | null;
    /**
     * The gists_url property
     */
    gistsUrl?: string | null;
    /**
     * The gravatar_id property
     */
    gravatarId?: string | null;
    /**
     * The html_url property
     */
    htmlUrl?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The login property
     */
    login?: string | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * The organizations_url property
     */
    organizationsUrl?: string | null;
    /**
     * The received_events_url property
     */
    receivedEventsUrl?: string | null;
    /**
     * The repos_url property
     */
    reposUrl?: string | null;
    /**
     * The site_admin property
     */
    siteAdmin?: boolean | null;
    /**
     * The starred_url property
     */
    starredUrl?: string | null;
    /**
     * The subscriptions_url property
     */
    subscriptionsUrl?: string | null;
    /**
     * The type property
     */
    type?: string | null;
    /**
     * The url property
     */
    url?: string | null;
}
export interface Repository_template_repository_permissions extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The admin property
     */
    admin?: boolean | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The maintain property
     */
    maintain?: boolean | null;
    /**
     * The pull property
     */
    pull?: boolean | null;
    /**
     * The push property
     */
    push?: boolean | null;
    /**
     * The triage property
     */
    triage?: boolean | null;
}
export type Repository_template_repository_squash_merge_commit_message = (typeof Repository_template_repository_squash_merge_commit_messageObject)[keyof typeof Repository_template_repository_squash_merge_commit_messageObject];
export type Repository_template_repository_squash_merge_commit_title = (typeof Repository_template_repository_squash_merge_commit_titleObject)[keyof typeof Repository_template_repository_squash_merge_commit_titleObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAutoMerge(writer: SerializationWriter, autoMerge: Partial<AutoMerge> | undefined | null = {}) : void {
    if (autoMerge) {
        writer.writeStringValue("commit_message", autoMerge.commitMessage);
        writer.writeStringValue("commit_title", autoMerge.commitTitle);
        writer.writeObjectValue<SimpleUser>("enabled_by", autoMerge.enabledBy, serializeSimpleUser);
        writer.writeEnumValue<AutoMerge_merge_method>("merge_method", autoMerge.mergeMethod);
        writer.writeAdditionalData(autoMerge.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLink(writer: SerializationWriter, link: Partial<Link> | undefined | null = {}) : void {
    if (link) {
        writer.writeStringValue("href", link.href);
        writer.writeAdditionalData(link.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNullableLicenseSimple(writer: SerializationWriter, nullableLicenseSimple: Partial<NullableLicenseSimple> | undefined | null = {}) : void {
    if (nullableLicenseSimple) {
        writer.writeStringValue("html_url", nullableLicenseSimple.htmlUrl);
        writer.writeStringValue("key", nullableLicenseSimple.key);
        writer.writeStringValue("name", nullableLicenseSimple.name);
        writer.writeStringValue("node_id", nullableLicenseSimple.nodeId);
        writer.writeStringValue("spdx_id", nullableLicenseSimple.spdxId);
        writer.writeStringValue("url", nullableLicenseSimple.url);
        writer.writeAdditionalData(nullableLicenseSimple.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNullableMilestone(writer: SerializationWriter, nullableMilestone: Partial<NullableMilestone> | undefined | null = {}) : void {
    if (nullableMilestone) {
        writer.writeDateValue("closed_at", nullableMilestone.closedAt);
        writer.writeNumberValue("closed_issues", nullableMilestone.closedIssues);
        writer.writeDateValue("created_at", nullableMilestone.createdAt);
        writer.writeObjectValue<NullableSimpleUser>("creator", nullableMilestone.creator, serializeNullableSimpleUser);
        writer.writeStringValue("description", nullableMilestone.description);
        writer.writeDateValue("due_on", nullableMilestone.dueOn);
        writer.writeStringValue("html_url", nullableMilestone.htmlUrl);
        writer.writeNumberValue("id", nullableMilestone.id);
        writer.writeStringValue("labels_url", nullableMilestone.labelsUrl);
        writer.writeStringValue("node_id", nullableMilestone.nodeId);
        writer.writeNumberValue("number", nullableMilestone.number);
        writer.writeNumberValue("open_issues", nullableMilestone.openIssues);
        writer.writeEnumValue<NullableMilestone_state>("state", nullableMilestone.state ?? NullableMilestone_stateObject.Open);
        writer.writeStringValue("title", nullableMilestone.title);
        writer.writeDateValue("updated_at", nullableMilestone.updatedAt);
        writer.writeStringValue("url", nullableMilestone.url);
        writer.writeAdditionalData(nullableMilestone.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNullableSimpleUser(writer: SerializationWriter, nullableSimpleUser: Partial<NullableSimpleUser> | undefined | null = {}) : void {
    if (nullableSimpleUser) {
        writer.writeStringValue("avatar_url", nullableSimpleUser.avatarUrl);
        writer.writeStringValue("email", nullableSimpleUser.email);
        writer.writeStringValue("events_url", nullableSimpleUser.eventsUrl);
        writer.writeStringValue("followers_url", nullableSimpleUser.followersUrl);
        writer.writeStringValue("following_url", nullableSimpleUser.followingUrl);
        writer.writeStringValue("gists_url", nullableSimpleUser.gistsUrl);
        writer.writeStringValue("gravatar_id", nullableSimpleUser.gravatarId);
        writer.writeStringValue("html_url", nullableSimpleUser.htmlUrl);
        writer.writeNumberValue("id", nullableSimpleUser.id);
        writer.writeStringValue("login", nullableSimpleUser.login);
        writer.writeStringValue("name", nullableSimpleUser.name);
        writer.writeStringValue("node_id", nullableSimpleUser.nodeId);
        writer.writeStringValue("organizations_url", nullableSimpleUser.organizationsUrl);
        writer.writeStringValue("received_events_url", nullableSimpleUser.receivedEventsUrl);
        writer.writeStringValue("repos_url", nullableSimpleUser.reposUrl);
        writer.writeBooleanValue("site_admin", nullableSimpleUser.siteAdmin);
        writer.writeStringValue("starred_at", nullableSimpleUser.starredAt);
        writer.writeStringValue("starred_url", nullableSimpleUser.starredUrl);
        writer.writeStringValue("subscriptions_url", nullableSimpleUser.subscriptionsUrl);
        writer.writeStringValue("type", nullableSimpleUser.type);
        writer.writeStringValue("url", nullableSimpleUser.url);
        writer.writeAdditionalData(nullableSimpleUser.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNullableTeamSimple(writer: SerializationWriter, nullableTeamSimple: Partial<NullableTeamSimple> | undefined | null = {}) : void {
    if (nullableTeamSimple) {
        writer.writeStringValue("description", nullableTeamSimple.description);
        writer.writeStringValue("html_url", nullableTeamSimple.htmlUrl);
        writer.writeNumberValue("id", nullableTeamSimple.id);
        writer.writeStringValue("ldap_dn", nullableTeamSimple.ldapDn);
        writer.writeStringValue("members_url", nullableTeamSimple.membersUrl);
        writer.writeStringValue("name", nullableTeamSimple.name);
        writer.writeStringValue("node_id", nullableTeamSimple.nodeId);
        writer.writeStringValue("permission", nullableTeamSimple.permission);
        writer.writeStringValue("privacy", nullableTeamSimple.privacy);
        writer.writeStringValue("repositories_url", nullableTeamSimple.repositoriesUrl);
        writer.writeStringValue("slug", nullableTeamSimple.slug);
        writer.writeStringValue("url", nullableTeamSimple.url);
        writer.writeAdditionalData(nullableTeamSimple.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePullRequestSimple(writer: SerializationWriter, pullRequestSimple: Partial<PullRequestSimple> | undefined | null = {}) : void {
    if (pullRequestSimple) {
        writer.writeStringValue("active_lock_reason", pullRequestSimple.activeLockReason);
        writer.writeObjectValue<NullableSimpleUser>("assignee", pullRequestSimple.assignee, serializeNullableSimpleUser);
        writer.writeCollectionOfObjectValues<SimpleUser>("assignees", pullRequestSimple.assignees, serializeSimpleUser);
        writer.writeEnumValue<AuthorAssociation>("author_association", pullRequestSimple.authorAssociation);
        writer.writeObjectValue<AutoMerge>("auto_merge", pullRequestSimple.autoMerge, serializeAutoMerge);
        writer.writeObjectValue<PullRequestSimple_base>("base", pullRequestSimple.base, serializePullRequestSimple_base);
        writer.writeStringValue("body", pullRequestSimple.body);
        writer.writeDateValue("closed_at", pullRequestSimple.closedAt);
        writer.writeStringValue("comments_url", pullRequestSimple.commentsUrl);
        writer.writeStringValue("commits_url", pullRequestSimple.commitsUrl);
        writer.writeDateValue("created_at", pullRequestSimple.createdAt);
        writer.writeStringValue("diff_url", pullRequestSimple.diffUrl);
        writer.writeBooleanValue("draft", pullRequestSimple.draft);
        writer.writeObjectValue<PullRequestSimple_head>("head", pullRequestSimple.head, serializePullRequestSimple_head);
        writer.writeStringValue("html_url", pullRequestSimple.htmlUrl);
        writer.writeNumberValue("id", pullRequestSimple.id);
        writer.writeStringValue("issue_url", pullRequestSimple.issueUrl);
        writer.writeCollectionOfObjectValues<PullRequestSimple_labels>("labels", pullRequestSimple.labels, serializePullRequestSimple_labels);
        writer.writeObjectValue<PullRequestSimple__links>("_links", pullRequestSimple.links, serializePullRequestSimple__links);
        writer.writeBooleanValue("locked", pullRequestSimple.locked);
        writer.writeStringValue("merge_commit_sha", pullRequestSimple.mergeCommitSha);
        writer.writeDateValue("merged_at", pullRequestSimple.mergedAt);
        writer.writeObjectValue<NullableMilestone>("milestone", pullRequestSimple.milestone, serializeNullableMilestone);
        writer.writeStringValue("node_id", pullRequestSimple.nodeId);
        writer.writeNumberValue("number", pullRequestSimple.number);
        writer.writeStringValue("patch_url", pullRequestSimple.patchUrl);
        writer.writeCollectionOfObjectValues<SimpleUser>("requested_reviewers", pullRequestSimple.requestedReviewers, serializeSimpleUser);
        writer.writeCollectionOfObjectValues<Team>("requested_teams", pullRequestSimple.requestedTeams, serializeTeam);
        writer.writeStringValue("review_comments_url", pullRequestSimple.reviewCommentsUrl);
        writer.writeStringValue("review_comment_url", pullRequestSimple.reviewCommentUrl);
        writer.writeStringValue("state", pullRequestSimple.state);
        writer.writeStringValue("statuses_url", pullRequestSimple.statusesUrl);
        writer.writeStringValue("title", pullRequestSimple.title);
        writer.writeDateValue("updated_at", pullRequestSimple.updatedAt);
        writer.writeStringValue("url", pullRequestSimple.url);
        writer.writeObjectValue<NullableSimpleUser>("user", pullRequestSimple.user, serializeNullableSimpleUser);
        writer.writeAdditionalData(pullRequestSimple.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePullRequestSimple__links(writer: SerializationWriter, pullRequestSimple__links: Partial<PullRequestSimple__links> | undefined | null = {}) : void {
    if (pullRequestSimple__links) {
        writer.writeObjectValue<Link>("comments", pullRequestSimple__links.comments, serializeLink);
        writer.writeObjectValue<Link>("commits", pullRequestSimple__links.commits, serializeLink);
        writer.writeObjectValue<Link>("html", pullRequestSimple__links.html, serializeLink);
        writer.writeObjectValue<Link>("issue", pullRequestSimple__links.issue, serializeLink);
        writer.writeObjectValue<Link>("review_comment", pullRequestSimple__links.reviewComment, serializeLink);
        writer.writeObjectValue<Link>("review_comments", pullRequestSimple__links.reviewComments, serializeLink);
        writer.writeObjectValue<Link>("self", pullRequestSimple__links.self, serializeLink);
        writer.writeObjectValue<Link>("statuses", pullRequestSimple__links.statuses, serializeLink);
        writer.writeAdditionalData(pullRequestSimple__links.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePullRequestSimple_base(writer: SerializationWriter, pullRequestSimple_base: Partial<PullRequestSimple_base> | undefined | null = {}) : void {
    if (pullRequestSimple_base) {
        writer.writeStringValue("label", pullRequestSimple_base.label);
        writer.writeStringValue("ref", pullRequestSimple_base.ref);
        writer.writeObjectValue<Repository>("repo", pullRequestSimple_base.repo, serializeRepository);
        writer.writeStringValue("sha", pullRequestSimple_base.sha);
        writer.writeObjectValue<NullableSimpleUser>("user", pullRequestSimple_base.user, serializeNullableSimpleUser);
        writer.writeAdditionalData(pullRequestSimple_base.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePullRequestSimple_head(writer: SerializationWriter, pullRequestSimple_head: Partial<PullRequestSimple_head> | undefined | null = {}) : void {
    if (pullRequestSimple_head) {
        writer.writeStringValue("label", pullRequestSimple_head.label);
        writer.writeStringValue("ref", pullRequestSimple_head.ref);
        writer.writeObjectValue<Repository>("repo", pullRequestSimple_head.repo, serializeRepository);
        writer.writeStringValue("sha", pullRequestSimple_head.sha);
        writer.writeObjectValue<NullableSimpleUser>("user", pullRequestSimple_head.user, serializeNullableSimpleUser);
        writer.writeAdditionalData(pullRequestSimple_head.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializePullRequestSimple_labels(writer: SerializationWriter, pullRequestSimple_labels: Partial<PullRequestSimple_labels> | undefined | null = {}) : void {
    if (pullRequestSimple_labels) {
        writer.writeStringValue("color", pullRequestSimple_labels.color);
        writer.writeBooleanValue("default", pullRequestSimple_labels.defaultEscaped);
        writer.writeStringValue("description", pullRequestSimple_labels.description);
        writer.writeNumberValue("id", pullRequestSimple_labels.id);
        writer.writeStringValue("name", pullRequestSimple_labels.name);
        writer.writeStringValue("node_id", pullRequestSimple_labels.nodeId);
        writer.writeStringValue("url", pullRequestSimple_labels.url);
        writer.writeAdditionalData(pullRequestSimple_labels.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRepository(writer: SerializationWriter, repository: Partial<Repository> | undefined | null = {}) : void {
    if (repository) {
        writer.writeBooleanValue("allow_auto_merge", repository.allowAutoMerge);
        writer.writeBooleanValue("allow_forking", repository.allowForking);
        writer.writeBooleanValue("allow_merge_commit", repository.allowMergeCommit);
        writer.writeBooleanValue("allow_rebase_merge", repository.allowRebaseMerge);
        writer.writeBooleanValue("allow_squash_merge", repository.allowSquashMerge);
        writer.writeBooleanValue("allow_update_branch", repository.allowUpdateBranch);
        writer.writeBooleanValue("anonymous_access_enabled", repository.anonymousAccessEnabled);
        writer.writeBooleanValue("archived", repository.archived);
        writer.writeStringValue("archive_url", repository.archiveUrl);
        writer.writeStringValue("assignees_url", repository.assigneesUrl);
        writer.writeStringValue("blobs_url", repository.blobsUrl);
        writer.writeStringValue("branches_url", repository.branchesUrl);
        writer.writeStringValue("clone_url", repository.cloneUrl);
        writer.writeStringValue("collaborators_url", repository.collaboratorsUrl);
        writer.writeStringValue("comments_url", repository.commentsUrl);
        writer.writeStringValue("commits_url", repository.commitsUrl);
        writer.writeStringValue("compare_url", repository.compareUrl);
        writer.writeStringValue("contents_url", repository.contentsUrl);
        writer.writeStringValue("contributors_url", repository.contributorsUrl);
        writer.writeDateValue("created_at", repository.createdAt);
        writer.writeStringValue("default_branch", repository.defaultBranch);
        writer.writeBooleanValue("delete_branch_on_merge", repository.deleteBranchOnMerge);
        writer.writeStringValue("deployments_url", repository.deploymentsUrl);
        writer.writeStringValue("description", repository.description);
        writer.writeBooleanValue("disabled", repository.disabled);
        writer.writeStringValue("downloads_url", repository.downloadsUrl);
        writer.writeStringValue("events_url", repository.eventsUrl);
        writer.writeBooleanValue("fork", repository.fork);
        writer.writeNumberValue("forks", repository.forks);
        writer.writeNumberValue("forks_count", repository.forksCount);
        writer.writeStringValue("forks_url", repository.forksUrl);
        writer.writeStringValue("full_name", repository.fullName);
        writer.writeStringValue("git_commits_url", repository.gitCommitsUrl);
        writer.writeStringValue("git_refs_url", repository.gitRefsUrl);
        writer.writeStringValue("git_tags_url", repository.gitTagsUrl);
        writer.writeStringValue("git_url", repository.gitUrl);
        writer.writeBooleanValue("has_discussions", repository.hasDiscussions);
        writer.writeBooleanValue("has_downloads", repository.hasDownloads);
        writer.writeBooleanValue("has_issues", repository.hasIssues);
        writer.writeBooleanValue("has_pages", repository.hasPages);
        writer.writeBooleanValue("has_projects", repository.hasProjects);
        writer.writeBooleanValue("has_wiki", repository.hasWiki);
        writer.writeStringValue("homepage", repository.homepage);
        writer.writeStringValue("hooks_url", repository.hooksUrl);
        writer.writeStringValue("html_url", repository.htmlUrl);
        writer.writeNumberValue("id", repository.id);
        writer.writeStringValue("issue_comment_url", repository.issueCommentUrl);
        writer.writeStringValue("issue_events_url", repository.issueEventsUrl);
        writer.writeStringValue("issues_url", repository.issuesUrl);
        writer.writeBooleanValue("is_template", repository.isTemplate);
        writer.writeStringValue("keys_url", repository.keysUrl);
        writer.writeStringValue("labels_url", repository.labelsUrl);
        writer.writeStringValue("language", repository.language);
        writer.writeStringValue("languages_url", repository.languagesUrl);
        writer.writeObjectValue<NullableLicenseSimple>("license", repository.license, serializeNullableLicenseSimple);
        writer.writeStringValue("master_branch", repository.masterBranch);
        writer.writeEnumValue<Repository_merge_commit_message>("merge_commit_message", repository.mergeCommitMessage);
        writer.writeEnumValue<Repository_merge_commit_title>("merge_commit_title", repository.mergeCommitTitle);
        writer.writeStringValue("merges_url", repository.mergesUrl);
        writer.writeStringValue("milestones_url", repository.milestonesUrl);
        writer.writeStringValue("mirror_url", repository.mirrorUrl);
        writer.writeStringValue("name", repository.name);
        writer.writeNumberValue("network_count", repository.networkCount);
        writer.writeStringValue("node_id", repository.nodeId);
        writer.writeStringValue("notifications_url", repository.notificationsUrl);
        writer.writeNumberValue("open_issues", repository.openIssues);
        writer.writeNumberValue("open_issues_count", repository.openIssuesCount);
        writer.writeObjectValue<NullableSimpleUser>("organization", repository.organization, serializeNullableSimpleUser);
        writer.writeObjectValue<SimpleUser>("owner", repository.owner, serializeSimpleUser);
        writer.writeObjectValue<Repository_permissions>("permissions", repository.permissions, serializeRepository_permissions);
        writer.writeBooleanValue("private", repository.private);
        writer.writeStringValue("pulls_url", repository.pullsUrl);
        writer.writeDateValue("pushed_at", repository.pushedAt);
        writer.writeStringValue("releases_url", repository.releasesUrl);
        writer.writeNumberValue("size", repository.size);
        writer.writeEnumValue<Repository_squash_merge_commit_message>("squash_merge_commit_message", repository.squashMergeCommitMessage);
        writer.writeEnumValue<Repository_squash_merge_commit_title>("squash_merge_commit_title", repository.squashMergeCommitTitle);
        writer.writeStringValue("ssh_url", repository.sshUrl);
        writer.writeNumberValue("stargazers_count", repository.stargazersCount);
        writer.writeStringValue("stargazers_url", repository.stargazersUrl);
        writer.writeStringValue("starred_at", repository.starredAt);
        writer.writeStringValue("statuses_url", repository.statusesUrl);
        writer.writeNumberValue("subscribers_count", repository.subscribersCount);
        writer.writeStringValue("subscribers_url", repository.subscribersUrl);
        writer.writeStringValue("subscription_url", repository.subscriptionUrl);
        writer.writeStringValue("svn_url", repository.svnUrl);
        writer.writeStringValue("tags_url", repository.tagsUrl);
        writer.writeStringValue("teams_url", repository.teamsUrl);
        writer.writeStringValue("temp_clone_token", repository.tempCloneToken);
        writer.writeObjectValue<Repository_template_repository>("template_repository", repository.templateRepository, serializeRepository_template_repository);
        writer.writeCollectionOfPrimitiveValues<string>("topics", repository.topics);
        writer.writeStringValue("trees_url", repository.treesUrl);
        writer.writeDateValue("updated_at", repository.updatedAt);
        writer.writeStringValue("url", repository.url);
        writer.writeBooleanValue("use_squash_pr_title_as_default", repository.useSquashPrTitleAsDefault);
        writer.writeStringValue("visibility", repository.visibility ?? "public");
        writer.writeNumberValue("watchers", repository.watchers);
        writer.writeNumberValue("watchers_count", repository.watchersCount);
        writer.writeBooleanValue("web_commit_signoff_required", repository.webCommitSignoffRequired);
        writer.writeAdditionalData(repository.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRepository_permissions(writer: SerializationWriter, repository_permissions: Partial<Repository_permissions> | undefined | null = {}) : void {
    if (repository_permissions) {
        writer.writeBooleanValue("admin", repository_permissions.admin);
        writer.writeBooleanValue("maintain", repository_permissions.maintain);
        writer.writeBooleanValue("pull", repository_permissions.pull);
        writer.writeBooleanValue("push", repository_permissions.push);
        writer.writeBooleanValue("triage", repository_permissions.triage);
        writer.writeAdditionalData(repository_permissions.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRepository_template_repository(writer: SerializationWriter, repository_template_repository: Partial<Repository_template_repository> | undefined | null = {}) : void {
    if (repository_template_repository) {
        writer.writeBooleanValue("allow_auto_merge", repository_template_repository.allowAutoMerge);
        writer.writeBooleanValue("allow_merge_commit", repository_template_repository.allowMergeCommit);
        writer.writeBooleanValue("allow_rebase_merge", repository_template_repository.allowRebaseMerge);
        writer.writeBooleanValue("allow_squash_merge", repository_template_repository.allowSquashMerge);
        writer.writeBooleanValue("allow_update_branch", repository_template_repository.allowUpdateBranch);
        writer.writeBooleanValue("archived", repository_template_repository.archived);
        writer.writeStringValue("archive_url", repository_template_repository.archiveUrl);
        writer.writeStringValue("assignees_url", repository_template_repository.assigneesUrl);
        writer.writeStringValue("blobs_url", repository_template_repository.blobsUrl);
        writer.writeStringValue("branches_url", repository_template_repository.branchesUrl);
        writer.writeStringValue("clone_url", repository_template_repository.cloneUrl);
        writer.writeStringValue("collaborators_url", repository_template_repository.collaboratorsUrl);
        writer.writeStringValue("comments_url", repository_template_repository.commentsUrl);
        writer.writeStringValue("commits_url", repository_template_repository.commitsUrl);
        writer.writeStringValue("compare_url", repository_template_repository.compareUrl);
        writer.writeStringValue("contents_url", repository_template_repository.contentsUrl);
        writer.writeStringValue("contributors_url", repository_template_repository.contributorsUrl);
        writer.writeStringValue("created_at", repository_template_repository.createdAt);
        writer.writeStringValue("default_branch", repository_template_repository.defaultBranch);
        writer.writeBooleanValue("delete_branch_on_merge", repository_template_repository.deleteBranchOnMerge);
        writer.writeStringValue("deployments_url", repository_template_repository.deploymentsUrl);
        writer.writeStringValue("description", repository_template_repository.description);
        writer.writeBooleanValue("disabled", repository_template_repository.disabled);
        writer.writeStringValue("downloads_url", repository_template_repository.downloadsUrl);
        writer.writeStringValue("events_url", repository_template_repository.eventsUrl);
        writer.writeBooleanValue("fork", repository_template_repository.fork);
        writer.writeNumberValue("forks_count", repository_template_repository.forksCount);
        writer.writeStringValue("forks_url", repository_template_repository.forksUrl);
        writer.writeStringValue("full_name", repository_template_repository.fullName);
        writer.writeStringValue("git_commits_url", repository_template_repository.gitCommitsUrl);
        writer.writeStringValue("git_refs_url", repository_template_repository.gitRefsUrl);
        writer.writeStringValue("git_tags_url", repository_template_repository.gitTagsUrl);
        writer.writeStringValue("git_url", repository_template_repository.gitUrl);
        writer.writeBooleanValue("has_downloads", repository_template_repository.hasDownloads);
        writer.writeBooleanValue("has_issues", repository_template_repository.hasIssues);
        writer.writeBooleanValue("has_pages", repository_template_repository.hasPages);
        writer.writeBooleanValue("has_projects", repository_template_repository.hasProjects);
        writer.writeBooleanValue("has_wiki", repository_template_repository.hasWiki);
        writer.writeStringValue("homepage", repository_template_repository.homepage);
        writer.writeStringValue("hooks_url", repository_template_repository.hooksUrl);
        writer.writeStringValue("html_url", repository_template_repository.htmlUrl);
        writer.writeNumberValue("id", repository_template_repository.id);
        writer.writeStringValue("issue_comment_url", repository_template_repository.issueCommentUrl);
        writer.writeStringValue("issue_events_url", repository_template_repository.issueEventsUrl);
        writer.writeStringValue("issues_url", repository_template_repository.issuesUrl);
        writer.writeBooleanValue("is_template", repository_template_repository.isTemplate);
        writer.writeStringValue("keys_url", repository_template_repository.keysUrl);
        writer.writeStringValue("labels_url", repository_template_repository.labelsUrl);
        writer.writeStringValue("language", repository_template_repository.language);
        writer.writeStringValue("languages_url", repository_template_repository.languagesUrl);
        writer.writeEnumValue<Repository_template_repository_merge_commit_message>("merge_commit_message", repository_template_repository.mergeCommitMessage);
        writer.writeEnumValue<Repository_template_repository_merge_commit_title>("merge_commit_title", repository_template_repository.mergeCommitTitle);
        writer.writeStringValue("merges_url", repository_template_repository.mergesUrl);
        writer.writeStringValue("milestones_url", repository_template_repository.milestonesUrl);
        writer.writeStringValue("mirror_url", repository_template_repository.mirrorUrl);
        writer.writeStringValue("name", repository_template_repository.name);
        writer.writeNumberValue("network_count", repository_template_repository.networkCount);
        writer.writeStringValue("node_id", repository_template_repository.nodeId);
        writer.writeStringValue("notifications_url", repository_template_repository.notificationsUrl);
        writer.writeNumberValue("open_issues_count", repository_template_repository.openIssuesCount);
        writer.writeObjectValue<Repository_template_repository_owner>("owner", repository_template_repository.owner, serializeRepository_template_repository_owner);
        writer.writeObjectValue<Repository_template_repository_permissions>("permissions", repository_template_repository.permissions, serializeRepository_template_repository_permissions);
        writer.writeBooleanValue("private", repository_template_repository.private);
        writer.writeStringValue("pulls_url", repository_template_repository.pullsUrl);
        writer.writeStringValue("pushed_at", repository_template_repository.pushedAt);
        writer.writeStringValue("releases_url", repository_template_repository.releasesUrl);
        writer.writeNumberValue("size", repository_template_repository.size);
        writer.writeEnumValue<Repository_template_repository_squash_merge_commit_message>("squash_merge_commit_message", repository_template_repository.squashMergeCommitMessage);
        writer.writeEnumValue<Repository_template_repository_squash_merge_commit_title>("squash_merge_commit_title", repository_template_repository.squashMergeCommitTitle);
        writer.writeStringValue("ssh_url", repository_template_repository.sshUrl);
        writer.writeNumberValue("stargazers_count", repository_template_repository.stargazersCount);
        writer.writeStringValue("stargazers_url", repository_template_repository.stargazersUrl);
        writer.writeStringValue("statuses_url", repository_template_repository.statusesUrl);
        writer.writeNumberValue("subscribers_count", repository_template_repository.subscribersCount);
        writer.writeStringValue("subscribers_url", repository_template_repository.subscribersUrl);
        writer.writeStringValue("subscription_url", repository_template_repository.subscriptionUrl);
        writer.writeStringValue("svn_url", repository_template_repository.svnUrl);
        writer.writeStringValue("tags_url", repository_template_repository.tagsUrl);
        writer.writeStringValue("teams_url", repository_template_repository.teamsUrl);
        writer.writeStringValue("temp_clone_token", repository_template_repository.tempCloneToken);
        writer.writeCollectionOfPrimitiveValues<string>("topics", repository_template_repository.topics);
        writer.writeStringValue("trees_url", repository_template_repository.treesUrl);
        writer.writeStringValue("updated_at", repository_template_repository.updatedAt);
        writer.writeStringValue("url", repository_template_repository.url);
        writer.writeBooleanValue("use_squash_pr_title_as_default", repository_template_repository.useSquashPrTitleAsDefault);
        writer.writeStringValue("visibility", repository_template_repository.visibility);
        writer.writeNumberValue("watchers_count", repository_template_repository.watchersCount);
        writer.writeAdditionalData(repository_template_repository.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRepository_template_repository_owner(writer: SerializationWriter, repository_template_repository_owner: Partial<Repository_template_repository_owner> | undefined | null = {}) : void {
    if (repository_template_repository_owner) {
        writer.writeStringValue("avatar_url", repository_template_repository_owner.avatarUrl);
        writer.writeStringValue("events_url", repository_template_repository_owner.eventsUrl);
        writer.writeStringValue("followers_url", repository_template_repository_owner.followersUrl);
        writer.writeStringValue("following_url", repository_template_repository_owner.followingUrl);
        writer.writeStringValue("gists_url", repository_template_repository_owner.gistsUrl);
        writer.writeStringValue("gravatar_id", repository_template_repository_owner.gravatarId);
        writer.writeStringValue("html_url", repository_template_repository_owner.htmlUrl);
        writer.writeNumberValue("id", repository_template_repository_owner.id);
        writer.writeStringValue("login", repository_template_repository_owner.login);
        writer.writeStringValue("node_id", repository_template_repository_owner.nodeId);
        writer.writeStringValue("organizations_url", repository_template_repository_owner.organizationsUrl);
        writer.writeStringValue("received_events_url", repository_template_repository_owner.receivedEventsUrl);
        writer.writeStringValue("repos_url", repository_template_repository_owner.reposUrl);
        writer.writeBooleanValue("site_admin", repository_template_repository_owner.siteAdmin);
        writer.writeStringValue("starred_url", repository_template_repository_owner.starredUrl);
        writer.writeStringValue("subscriptions_url", repository_template_repository_owner.subscriptionsUrl);
        writer.writeStringValue("type", repository_template_repository_owner.type);
        writer.writeStringValue("url", repository_template_repository_owner.url);
        writer.writeAdditionalData(repository_template_repository_owner.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeRepository_template_repository_permissions(writer: SerializationWriter, repository_template_repository_permissions: Partial<Repository_template_repository_permissions> | undefined | null = {}) : void {
    if (repository_template_repository_permissions) {
        writer.writeBooleanValue("admin", repository_template_repository_permissions.admin);
        writer.writeBooleanValue("maintain", repository_template_repository_permissions.maintain);
        writer.writeBooleanValue("pull", repository_template_repository_permissions.pull);
        writer.writeBooleanValue("push", repository_template_repository_permissions.push);
        writer.writeBooleanValue("triage", repository_template_repository_permissions.triage);
        writer.writeAdditionalData(repository_template_repository_permissions.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSimpleUser(writer: SerializationWriter, simpleUser: Partial<SimpleUser> | undefined | null = {}) : void {
    if (simpleUser) {
        writer.writeStringValue("avatar_url", simpleUser.avatarUrl);
        writer.writeStringValue("email", simpleUser.email);
        writer.writeStringValue("events_url", simpleUser.eventsUrl);
        writer.writeStringValue("followers_url", simpleUser.followersUrl);
        writer.writeStringValue("following_url", simpleUser.followingUrl);
        writer.writeStringValue("gists_url", simpleUser.gistsUrl);
        writer.writeStringValue("gravatar_id", simpleUser.gravatarId);
        writer.writeStringValue("html_url", simpleUser.htmlUrl);
        writer.writeNumberValue("id", simpleUser.id);
        writer.writeStringValue("login", simpleUser.login);
        writer.writeStringValue("name", simpleUser.name);
        writer.writeStringValue("node_id", simpleUser.nodeId);
        writer.writeStringValue("organizations_url", simpleUser.organizationsUrl);
        writer.writeStringValue("received_events_url", simpleUser.receivedEventsUrl);
        writer.writeStringValue("repos_url", simpleUser.reposUrl);
        writer.writeBooleanValue("site_admin", simpleUser.siteAdmin);
        writer.writeStringValue("starred_at", simpleUser.starredAt);
        writer.writeStringValue("starred_url", simpleUser.starredUrl);
        writer.writeStringValue("subscriptions_url", simpleUser.subscriptionsUrl);
        writer.writeStringValue("type", simpleUser.type);
        writer.writeStringValue("url", simpleUser.url);
        writer.writeAdditionalData(simpleUser.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeam(writer: SerializationWriter, team: Partial<Team> | undefined | null = {}) : void {
    if (team) {
        writer.writeStringValue("description", team.description);
        writer.writeStringValue("html_url", team.htmlUrl);
        writer.writeNumberValue("id", team.id);
        writer.writeStringValue("members_url", team.membersUrl);
        writer.writeStringValue("name", team.name);
        writer.writeStringValue("node_id", team.nodeId);
        writer.writeObjectValue<NullableTeamSimple>("parent", team.parent, serializeNullableTeamSimple);
        writer.writeStringValue("permission", team.permission);
        writer.writeObjectValue<Team_permissions>("permissions", team.permissions, serializeTeam_permissions);
        writer.writeStringValue("privacy", team.privacy);
        writer.writeStringValue("repositories_url", team.repositoriesUrl);
        writer.writeStringValue("slug", team.slug);
        writer.writeStringValue("url", team.url);
        writer.writeAdditionalData(team.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeTeam_permissions(writer: SerializationWriter, team_permissions: Partial<Team_permissions> | undefined | null = {}) : void {
    if (team_permissions) {
        writer.writeBooleanValue("admin", team_permissions.admin);
        writer.writeBooleanValue("maintain", team_permissions.maintain);
        writer.writeBooleanValue("pull", team_permissions.pull);
        writer.writeBooleanValue("push", team_permissions.push);
        writer.writeBooleanValue("triage", team_permissions.triage);
        writer.writeAdditionalData(team_permissions.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeValidationError(writer: SerializationWriter, validationError: Partial<ValidationError> | undefined | null = {}) : void {
    if (validationError) {
        writer.writeStringValue("documentation_url", validationError.documentationUrl);
        writer.writeCollectionOfObjectValues<ValidationError_errors>("errors", validationError.errors, serializeValidationError_errors);
        writer.writeStringValue("message", validationError.messageEscaped);
        writer.writeAdditionalData(validationError.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeValidationError_errors(writer: SerializationWriter, validationError_errors: Partial<ValidationError_errors> | undefined | null = {}) : void {
    if (validationError_errors) {
        writer.writeStringValue("code", validationError_errors.code);
        writer.writeStringValue("field", validationError_errors.field);
        writer.writeNumberValue("index", validationError_errors.index);
        writer.writeStringValue("message", validationError_errors.message);
        writer.writeStringValue("resource", validationError_errors.resource);
        switch (true) {
            case typeof validationError_errors.value === "number":
                writer.writeNumberValue("value", validationError_errors.value as number);
            break;
            case typeof validationError_errors.value === "string":
                writer.writeStringValue("value", validationError_errors.value as string);
            break;
            default:
                writer.writeCollectionOfObjectValues<string>("value", validationError_errors.value as string[] | undefined | null, serializeValidationError_errors_value);
            break;
        }
        writer.writeAdditionalData(validationError_errors.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeValidationError_errors_value(writer: SerializationWriter, validationError_errors_value: Partial<string> | undefined | null = {}) : void {
    if (validationError_errors_value === undefined || validationError_errors_value === null) return;
    switch (typeof validationError_errors_value) {
        case "string":
            break;
    }
}
/**
 * A GitHub user.
 */
export interface SimpleUser extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The avatar_url property
     */
    avatarUrl?: string | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The events_url property
     */
    eventsUrl?: string | null;
    /**
     * The followers_url property
     */
    followersUrl?: string | null;
    /**
     * The following_url property
     */
    followingUrl?: string | null;
    /**
     * The gists_url property
     */
    gistsUrl?: string | null;
    /**
     * The gravatar_id property
     */
    gravatarId?: string | null;
    /**
     * The html_url property
     */
    htmlUrl?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The login property
     */
    login?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * The organizations_url property
     */
    organizationsUrl?: string | null;
    /**
     * The received_events_url property
     */
    receivedEventsUrl?: string | null;
    /**
     * The repos_url property
     */
    reposUrl?: string | null;
    /**
     * The site_admin property
     */
    siteAdmin?: boolean | null;
    /**
     * The starred_at property
     */
    starredAt?: string | null;
    /**
     * The starred_url property
     */
    starredUrl?: string | null;
    /**
     * The subscriptions_url property
     */
    subscriptionsUrl?: string | null;
    /**
     * The type property
     */
    type?: string | null;
    /**
     * The url property
     */
    url?: string | null;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The html_url property
     */
    htmlUrl?: string | null;
    /**
     * The id property
     */
    id?: number | null;
    /**
     * The members_url property
     */
    membersUrl?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The node_id property
     */
    nodeId?: string | null;
    /**
     * Groups of organization members that gives permissions on specified repositories.
     */
    parent?: NullableTeamSimple | null;
    /**
     * The permission property
     */
    permission?: string | null;
    /**
     * The permissions property
     */
    permissions?: Team_permissions | null;
    /**
     * The privacy property
     */
    privacy?: string | null;
    /**
     * The repositories_url property
     */
    repositoriesUrl?: string | null;
    /**
     * The slug property
     */
    slug?: string | null;
    /**
     * The url property
     */
    url?: string | null;
}
export interface Team_permissions extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The admin property
     */
    admin?: boolean | null;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The maintain property
     */
    maintain?: boolean | null;
    /**
     * The pull property
     */
    pull?: boolean | null;
    /**
     * The push property
     */
    push?: boolean | null;
    /**
     * The triage property
     */
    triage?: boolean | null;
}
/**
 * Validation Error
 */
export interface ValidationError extends AdditionalDataHolder, ApiError, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The documentation_url property
     */
    documentationUrl?: string | null;
    /**
     * The errors property
     */
    errors?: ValidationError_errors[] | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
}
export interface ValidationError_errors extends AdditionalDataHolder, BackedModel, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * Stores model information.
     */
    backingStoreEnabled?: boolean | null;
    /**
     * The code property
     */
    code?: string | null;
    /**
     * The field property
     */
    field?: string | null;
    /**
     * The index property
     */
    index?: number | null;
    /**
     * The message property
     */
    message?: string | null;
    /**
     * The resource property
     */
    resource?: string | null;
    /**
     * The value property
     */
    value?: number | string[] | string | null;
}
export type ValidationError_errors_value = number | string[] | string;
/**
 * How the author is associated with the repository.
 */
export const AuthorAssociationObject = {
    COLLABORATOR: "COLLABORATOR",
    CONTRIBUTOR: "CONTRIBUTOR",
    FIRST_TIMER: "FIRST_TIMER",
    FIRST_TIME_CONTRIBUTOR: "FIRST_TIME_CONTRIBUTOR",
    MANNEQUIN: "MANNEQUIN",
    MEMBER: "MEMBER",
    NONE: "NONE",
    OWNER: "OWNER",
} as const;
/**
 * The merge method to use.
 */
export const AutoMerge_merge_methodObject = {
    Merge: "merge",
    Squash: "squash",
    Rebase: "rebase",
} as const;
/**
 * The state of the milestone.
 */
export const NullableMilestone_stateObject = {
    Open: "open",
    Closed: "closed",
} as const;
/**
 * The default value for a merge commit message.- `PR_TITLE` - default to the pull request's title.- `PR_BODY` - default to the pull request's body.- `BLANK` - default to a blank commit message.
 */
export const Repository_merge_commit_messageObject = {
    PR_BODY: "PR_BODY",
    PR_TITLE: "PR_TITLE",
    BLANK: "BLANK",
} as const;
/**
 * The default value for a merge commit title.- `PR_TITLE` - default to the pull request's title.- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
 */
export const Repository_merge_commit_titleObject = {
    PR_TITLE: "PR_TITLE",
    MERGE_MESSAGE: "MERGE_MESSAGE",
} as const;
/**
 * The default value for a squash merge commit message:- `PR_BODY` - default to the pull request's body.- `COMMIT_MESSAGES` - default to the branch's commit messages.- `BLANK` - default to a blank commit message.
 */
export const Repository_squash_merge_commit_messageObject = {
    PR_BODY: "PR_BODY",
    COMMIT_MESSAGES: "COMMIT_MESSAGES",
    BLANK: "BLANK",
} as const;
/**
 * The default value for a squash merge commit title:- `PR_TITLE` - default to the pull request's title.- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 */
export const Repository_squash_merge_commit_titleObject = {
    PR_TITLE: "PR_TITLE",
    COMMIT_OR_PR_TITLE: "COMMIT_OR_PR_TITLE",
} as const;
/**
 * The default value for a merge commit message.- `PR_TITLE` - default to the pull request's title.- `PR_BODY` - default to the pull request's body.- `BLANK` - default to a blank commit message.
 */
export const Repository_template_repository_merge_commit_messageObject = {
    PR_BODY: "PR_BODY",
    PR_TITLE: "PR_TITLE",
    BLANK: "BLANK",
} as const;
/**
 * The default value for a merge commit title.- `PR_TITLE` - default to the pull request's title.- `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
 */
export const Repository_template_repository_merge_commit_titleObject = {
    PR_TITLE: "PR_TITLE",
    MERGE_MESSAGE: "MERGE_MESSAGE",
} as const;
/**
 * The default value for a squash merge commit message:- `PR_BODY` - default to the pull request's body.- `COMMIT_MESSAGES` - default to the branch's commit messages.- `BLANK` - default to a blank commit message.
 */
export const Repository_template_repository_squash_merge_commit_messageObject = {
    PR_BODY: "PR_BODY",
    COMMIT_MESSAGES: "COMMIT_MESSAGES",
    BLANK: "BLANK",
} as const;
/**
 * The default value for a squash merge commit title:- `PR_TITLE` - default to the pull request's title.- `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
 */
export const Repository_template_repository_squash_merge_commit_titleObject = {
    PR_TITLE: "PR_TITLE",
    COMMIT_OR_PR_TITLE: "COMMIT_OR_PR_TITLE",
} as const;
/* tslint:enable */
/* eslint-enable */
