{
  "Todo Tasks From PRs": {
    "prefix": "todo",
    "body": [
      "for (final var pullRequest : pullRequests) {",
      "    final var todoTask = graphClient.me().todo().lists().byTodoTaskListId(todoList.getId()).tasks().post(new TodoTask() {{",
      "        setTitle(\"review\" + pullRequest.getTitle());",
      "        setDueDateTime(new DateTimeTimeZone() {{",
      "            setDateTime(pullRequest.getCreatedAt().plusDays(7).format(DateTimeFormatter.ISO_DATE_TIME));",
      "            setTimeZone(\"UTC\");",
      "        }});",
      "        setImportance(Importance.High);",
      "        setLinkedResources(new ArrayList<>() {{",
      "            add(new LinkedResource() {{",
      "                setWebUrl(pullRequest.getHtmlUrl());",
      "                setApplicationName(\"GitHub\");",
      "            }});",
      "        }});",
      "    }});",
      "    System.out.println(\"Added task \" + todoTask.getTitle() + \" to your todo list\");",
      "}"
    ],
    "description": "Creates a todo task for each pull request"
  },
  "Todo Tasks usings": {
    "prefix": "todo-usings",
    "body": [
      "import java.time.format.DateTimeFormatter;",
      "import java.util.ArrayList;",
      "",
      "import githubtododemo.githubauthentication.GitHubAuthenticationProvider;",
      "import githubtododemo.githubclient.GitHubServiceClient;",
      "import githubtododemo.microsoftgraphclient.MicrosoftGraphServiceClient;",
      "import githubtododemo.microsoftgraphclient.models.DateTimeTimeZone;",
      "import githubtododemo.microsoftgraphclient.models.Importance;",
      "import githubtododemo.microsoftgraphclient.models.LinkedResource;",
      "import githubtododemo.microsoftgraphclient.models.TodoTask;",
      "",
      "import com.microsoft.kiota.bundle.DefaultRequestAdapter;",
      "import com.microsoft.kiota.authentication.AzureIdentityAuthenticationProvider;",
      "import com.azure.identity.DeviceCodeCredentialBuilder;",
    ],
    "description": "Adds the usings for the todo tasks"
  },
  "Todo graph auth": {
    "prefix": "todo-graph-auth",
    "body": [
      "final var microsoftGraphTokenCredentials = new DeviceCodeCredentialBuilder()",
      "    .clientId(Constants.graphClientId)",
      "    .tenantId(Constants.graphTenantId)",
      "    .challengeConsumer(challenge -> {",
      "        // lets user know of the challenge",
      "        System.out.println(challenge.getMessage());",
      "    }).build();",
      "final var microsoftGraphAuthenticationProvider = new AzureIdentityAuthenticationProvider(microsoftGraphTokenCredentials, new String[] {\"graph.microsoft.com\"}, \"Tasks.ReadWrite\");",
      "final var microsoftGraphRequestAdapter = new DefaultRequestAdapter(microsoftGraphAuthenticationProvider);"
    ],
    "description": "Adds the graph client authentication"
  },
  "Todo github auth": {
    "prefix": "todo-github-auth",
    "body": [
      "final var gitHubAuthenticationProvider = new GitHubAuthenticationProvider(Constants.githubClientId, \"repo\");",
      "final var gitHubRequestAdapter = new DefaultRequestAdapter(gitHubAuthenticationProvider);"
    ],
    "description": "Adds the github client authentication"
  }
}
