{
  "Todo Tasks From PRs": {
    "prefix": "todo",
    "body": [
      "if(todoList == null || string.IsNullOrEmpty(todoList.Id)) {",
      "await Console.Error.WriteLineAsync(\"No todo list found. Exiting.\");",
      "return;",
      "}",
      "if (pullRequests == null) {",
      "await Console.Error.WriteLineAsync(\"No pull requests found. Exiting.\");",
      "return;",
      "}",
      "foreach(var pullRequest in pullRequests) {",
      "var addedTask = await graphClient.Me.Todo.Lists[todoList.Id].Tasks.PostAsync(",
      "new TodoTask() {",
      "OdataType = null,",
      "Title = pullRequest.Title,",
      "DueDateTime = new DateTimeTimeZone {",
      "OdataType = null,",
      "DateTime = pullRequest.Created_at?.Add(TimeSpan.FromDays(7)).ToString(\"o\"),",
      "TimeZone = \"UTC\"",
      "},",
      "Importance = Importance.High,",
      "LinkedResources = new List<LinkedResource> {",
      "new LinkedResource {",
      "OdataType = null,",
      "WebUrl = pullRequest.Html_url,",
      "ApplicationName = \"GitHub\",",
      "}",
      "}",
      "});",
      "Console.WriteLine($\"Added task {addedTask?.Title} to your todo list\");",
      "}"
    ],
    "description": "Creates a todo task for each pull request"
  },
  "Todo Tasks usings": {
    "prefix": "todo-usings",
    "body": [
      "using GitHubTodoDemo.GitHub;",
      "using GitHubTodoDemo.GitHubAuthentication;",
      "using GitHubTodoDemo.MicrosoftGraph;",
      "using GitHubTodoDemo.MicrosoftGraph.Models;",
      "using Azure.Identity;",
      "using Microsoft.Kiota.Http.HttpClientLibrary;",
      "using Microsoft.Kiota.Authentication.Azure;"
    ],
    "description": "Adds the usings for the todo tasks"
  },
  "Todo graph auth": {
    "prefix": "todo-graph-auth",
    "body": [
      "var tokenCredential = new DeviceCodeCredential(",
      "clientId: Constants.GraphClientId,",
      "tenantId: Constants.GraphTenantId,",
      "deviceCodeCallback: (deviceCodeInfo, _) =>",
      "{",
      "Console.WriteLine(deviceCodeInfo.Message);",
      "return Task.FromResult(0);",
      "});",
      "var graphAuthenticationProvider = new AzureIdentityAuthenticationProvider(tokenCredential, new string[] {\"graph.microsoft.com\"}, scopes: new string[] { \"Tasks.ReadWrite\"});",
      "var graphRequestAdapter = new HttpClientRequestAdapter(graphAuthenticationProvider);"
    ],
    "description": "Adds the graph client authentication"
  },
  "Todo github auth": {
    "prefix": "todo-github-auth",
    "body": [
      "var githubAuthenticationProvider = new GitHubAuthenticationProvider(Constants.GithubClientId, \"repo\", new[] { \"api.github.com\" });",
      "var githubRequestAdapter = new HttpClientRequestAdapter(githubAuthenticationProvider);"
    ],
    "description": "Adds the github client authentication"
  }
}
